<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GeoBrinkmann</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>GeoBrinkmann</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 10 Jun 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hub8298344815fb61130442b7c2888b4e0_27889_512x512_fill_lanczos_center_2.png</url>
      <title>GeoBrinkmann</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Modelling eye-level visibility of urban green space: Optimising city-wide point-based viewshed computations through prototyping</title>
      <link>/publication/brinkmann_2022/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      <guid>/publication/brinkmann_2022/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Studies from public and environmental health show strong indication of the importance of visible urban green space. However, current approaches for modelling viewshed based greenness visibility still have high computation costs. As a consequence, comparative studies of city-wide visible greenness, everyday mobility, and individual attention are still at the edge of feasibility. Known optimisations focus on reducing the computation time of single viewsheds. As point-based viewsheds are computed using geospatial data, current approaches seek to accelerate calculation using intelligent data structures or spatial indexes (at the cost of additional memory) or develop approximative heuristic solutions. In contrast, as we aim to process large numbers of viewsheds with fixed parameterisations, we use a prototyping approach preprocessing a single viewshed template to store common prefixes of consecutive lines of sight that can be applied to followup viewsheds by a simple offset operation. Our evaluation shows an average improvement of 34% over the benchmark algorithm (RFVS), with even stronger improvements for large viewsheds. We anticipate that these findings lay the groundwork for further optimisation of point-based viewshed computation, improving the feasibility of subsequent comparative studies in the field of public and environmental health.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neighborhood Greenspace and Socioeconomic Risk are Associated with Diabetes Risk at the Sub-neighborhood Scale: Results from the Prospective Urban and Rural Epidemiology (PURE) Study</title>
      <link>/publication/walker_2022/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      <guid>/publication/walker_2022/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Greenspace and socioeconomic status are known correlates of diabetes prevalence, but their combined effects at the sub-neighborhood scale are not yet known. This study derives, maps, and validates a combined socioeconomic/greenspace index of individual-level diabetes risk at the sub-neighborhood scale, without the need for clinical measurements. In two Canadian cities (Vancouver and Hamilton), we computed 4 greenspace variables from satellite imagery and extracted 11 socioeconomic variables from the Canadian census. We mapped 5125 participants from the Prospective Urban and Rural Epidemiology Study by their residential address and used age- and sex-dependent walking speeds to estimate individual exposure zones to local greenspace and socioeconomic characteristics, which were then entered into a principal component analysis to derive a novel diabetes risk index (DRI-GLUCoSE). We mapped index scores in both study areas and validated the index using fully adjusted logistic regression models to predict individual diabetes status. Model performance was then compared to other non-clinical diabetes risk indices from the literature. Diabetes prevalence among participants was 9.9%. The DRI-GLUCoSE index was a significant predictor of diabetes status, exhibiting a small non-significant attenuation with the inclusion of dietary and physical activity variables. The final models achieved a predictive accuracy of 75%, the highest among environmental risk models to date. Our combined index of local greenspace and socioeconomic factors demonstrates that the environmental component of diabetes risk is not sufficiently explained by diet and physical activity, and that increasing urban greenspace may be a suitable means of reducing the burden of diabetes at the community scale.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Inverse Distance Weighting (IDW) Interpolation with Rcpp</title>
      <link>/post/iwd/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      <guid>/post/iwd/</guid>
      <description>
&lt;script src=&#34;/post/iwd/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;A common task in the field of geostatistics is interpolation. According to the first law of Geography, “&lt;em&gt;Everything is related to everything else. But near things are more related than distant things.&lt;/em&gt;” &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-tobler1970&#34; role=&#34;doc-biblioref&#34;&gt;Tobler 1970&lt;/a&gt;)&lt;/span&gt;. We can make use of this to interpolate values over a spatial region from a finite set of observations. There are already a number of great sources that describe geospatial interpolation methods &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-gisgeography&#34; role=&#34;doc-biblioref&#34;&gt;GISGeography 2016&lt;/a&gt;; &lt;a href=&#34;#ref-berlin&#34; role=&#34;doc-biblioref&#34;&gt;Hartmann, Krois, and Waske 2018&lt;/a&gt;; &lt;a href=&#34;#ref-dunnington&#34; role=&#34;doc-biblioref&#34;&gt;Dunnington 2019&lt;/a&gt;; &lt;a href=&#34;#ref-wilke&#34; role=&#34;doc-biblioref&#34;&gt;Wilke 2020&lt;/a&gt;)&lt;/span&gt;. So in this post I don’t want to explain these methods again, but instead give a practical example on how to implement Inverse Distance Weighting (IDW) in C++ with Rcpp. I will explain the Rcpp code step by step, the finished result is available in the GVI R package on &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GitHub&lt;/a&gt;.&lt;br /&gt;
&lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-gisgeography&#34; role=&#34;doc-biblioref&#34;&gt;GISGeography&lt;/a&gt; (&lt;a href=&#34;#ref-gisgeography&#34; role=&#34;doc-biblioref&#34;&gt;2016&lt;/a&gt;)&lt;/span&gt; provides an excellent explanation of the maths behind IDW. In short, the interpolated value of any location is based on the values of known locations, assuming closer values are more related than further values.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
z = \frac{\sum_{i}^{n}\frac{z_i}{{d_i}^\beta}}{\sum_{i}^{n}\frac{1}{{d_i}^\beta}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; is the value to be interpolated, &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; the number of surrounding known locations, and &lt;span class=&#34;math inline&#34;&gt;\(z_i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(d_i\)&lt;/span&gt; their corresponding value and distance, respectively. &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; describes the distance power, that determines the degree to which nearer points are preferred over more distant points.&lt;/p&gt;
&lt;p&gt;Below is a small example visualized using the &lt;a href=&#34;https://www.rayshader.com/&#34;&gt;rayshader&lt;/a&gt; R package:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Distance&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;850&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;1300&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;Plots/ray1.png&#34; style=&#34;width:70.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Using the equation we can manually calculate the value &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; for the point in the middle with &lt;span class=&#34;math inline&#34;&gt;\(\beta = 2\)&lt;/span&gt; as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(z = (\frac{12}{300^2} + \frac{8}{800^2} + \frac{10}{850^2} + \frac{9}{1300^2}) / (\frac{1}{300^2} + \frac{1}{800^2} + \frac{1}{850^2} + \frac{1}{1300^2})\approx 11.3\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;computing-idw-with-rcpp&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Computing IDW with Rcpp&lt;/h1&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;First of all we need some data to interpolate. For that we will follow along the example of the FU-Berlin &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-berlin&#34; role=&#34;doc-biblioref&#34;&gt;Hartmann, Krois, and Waske 2018&lt;/a&gt;)&lt;/span&gt; and use weather station data provided by the &lt;a href=&#34;http://www.dwd.de/EN/Home/home_node.html&#34;&gt;Deutscher Wetterdienst (DWD)&lt;/a&gt; (German Weather Service).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(sf)

# Retrieve Federal States by the the getData() function from the raster package
east_germany &amp;lt;- c(&amp;#39;Sachsen&amp;#39;, &amp;#39;Sachsen-Anhalt&amp;#39;, &amp;#39;Berlin&amp;#39;,
                  &amp;#39;Mecklenburg-Vorpommern&amp;#39;,&amp;#39;Brandenburg&amp;#39;, &amp;#39;Thüringen&amp;#39;)

aoi &amp;lt;- raster::getData(country = &amp;quot;Germany&amp;quot;, level = 1) %&amp;gt;%
  st_as_sf() %&amp;gt;% 
  filter(NAME_1 %in% east_germany) %&amp;gt;% 
  st_transform(3035) %&amp;gt;%
  st_union()


# Download DWD data
dwd &amp;lt;- read.csv2(&amp;quot;https://userpage.fu-berlin.de/soga/300/30100_data_sets/DWD.csv&amp;quot;,
                 stringsAsFactors = FALSE) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(&amp;#39;LAT&amp;#39;,&amp;#39;LON&amp;#39;, &amp;quot;MEAN.ANNUAL.RAINFALL&amp;quot;, &amp;quot;ALTITUDE&amp;quot;) %&amp;gt;%
  rename(rain = &amp;quot;MEAN.ANNUAL.RAINFALL&amp;quot;) %&amp;gt;% 
  na.omit()

# Convert to SF and transform to ETRS89/LAEA Europe
dwd.sf &amp;lt;- st_as_sf(dwd, coords = c(&amp;quot;LON&amp;quot;,&amp;quot;LAT&amp;quot;), crs = 4326) %&amp;gt;% 
  st_transform(3035) %&amp;gt;% 
  st_intersection(aoi)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/iwd/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;384&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For the Rcpp algorithm, we need to convert the shapefile to a raster first and extract the raster values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)
dwd.rast &amp;lt;- raster(xmn = st_bbox(dwd.sf)[1],
                   xmx = st_bbox(dwd.sf)[3],
                   ymn = st_bbox(dwd.sf)[2],
                   ymx = st_bbox(dwd.sf)[4],
                   crs = st_crs(dwd.sf)$proj4string,
                   resolution = 10000) %&amp;gt;% 
  rasterize(dwd.sf, ., &amp;quot;rain&amp;quot;, background = NA)

dwd.rast_values &amp;lt;- getValues(dwd.rast)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rcpp-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rcpp code&lt;/h2&gt;
&lt;p&gt;We use the &lt;code&gt;S4&lt;/code&gt; structure of raster objects to read basic raster information (e.g. resolution, nrow, …) from the input raster. For that I’ll include the RasterInfo structure that you can find &lt;a href=&#34;https://github.com/STBrinkmann/GVI/blob/main/src/rsinfo.h&#34;&gt;here&lt;/a&gt;. The Rcpp implementation of the IDW algorithm has the following general structure:&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;Rcpp.h&amp;gt;
#include &amp;quot;rsinfo.h&amp;quot;

using namespace Rcpp;

// [[Rcpp::export]]
NumericVector IDW_Rcpp(S4 &amp;amp;rast, const NumericVector &amp;amp;x,
                       const int n, const double b, const double radius)
{
  // Basic raster information
  RasterInfo rast_info(rast);
  
  // Convert radius to pixel
  const int r_pxl = (int)(radius/rast_info.res);
  
  
  // Output
  NumericVector out(x.size(), NA_REAL);
  
  
  // Main loop: Loop over all values of the raster x
  for(int j = 0; j &amp;lt; x.size(); j++){
    
    // 1. Convert j to row/col and X/Y coordinates
    
    // 2. Calculate distance to all cells and store their values
    
    // 3. Sort by distance and select top n
    
    // 4. Compute IDW
  }
  
  return out;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below I will explain all four sections in detail, you can find the final source code on &lt;a href=&#34;https://github.com/STBrinkmann/GVI/blob/main/src/IDW_cpp.cpp&#34;&gt;GitHub&lt;/a&gt;. Also, if you would like to support multithreading, it is really simple using &lt;a href=&#34;https://www.openmp.org/&#34;&gt;OpenMP&lt;/a&gt;. We’ll come back to that later.&lt;/p&gt;
&lt;div id=&#34;convert-j-to-rowcol-and-xy-coordinates&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1. Convert j to row/col and X/Y coordinates&lt;/h4&gt;
&lt;p&gt;We can use simple math to obtain the row/col and X/Y coordinates from the current cell &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// row col from cell
const int row_j = j / rast_info.ncol;
const int col_j = j - (row_j * rast_info.ncol);

// XY from cell
const double y_j = rast_info.ymax - (row_j + 0.5) * rast_info.res;
const double x_j = rast_info.xmin + (col_j + 0.5) * rast_info.res;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-distance-to-all-cells-and-store-their-values&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2. Calculate distance to all cells and store their values&lt;/h4&gt;
&lt;p&gt;To calculate the distance to the current cell &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; and the corresponding value we need to iterate over all cells that are within the radius. For that we take the row (or column) $row_j$ and loop over all rows (or columns) &lt;span class=&#34;math inline&#34;&gt;\(row_i\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(row_j-radius &amp;lt;= row_i &amp;lt;= row_j+radius\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Again, the cell &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and X/Y coordinates can be calculated using simple math. The distance from &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; is calculated using simple euclidean distance. Of course one could take the earths curvature into account, but let’s keep it simple for now. Finally, the distance and value of cell &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; will be stored. Note, that the cells &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; can be identical. In this case &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; would be &lt;span class=&#34;math inline&#34;&gt;\(0\)&lt;/span&gt; and result in a math error due to division by zero. Therefore, we simply store a fraction of the raster resolution in this case. One could also store a very small number or even the true value of &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;. However, while testing different values, this led to very pointy interpolation maps.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// Distance (d) and value (z) vector
std::vector&amp;lt;double&amp;gt; d;
std::vector&amp;lt;double&amp;gt; z;

// Iterate over all cells that are within the radius
for(int row_i = row_j-r_pxl; row_i &amp;lt;= row_j+r_pxl; row_i++){
  if(row_i &amp;gt; 0 &amp;amp;&amp;amp; row_i &amp;lt; rast_info.nrow){
    
    for(int col_i = col_j-r_pxl; col_i &amp;lt;= col_j+r_pxl; col_i++){
      if(col_i &amp;gt; 0 &amp;amp;&amp;amp; col_i &amp;lt; rast_info.ncol){
        
        // Cell from row/col
        const int i = row_i * rast_info.ncol + col_i;
        const double i_value = x[i];
        
        if(!NumericVector::is_na(i_value)) {
          // XY from cell
          const double y_i = rast_info.ymax - (row_i + 0.5) * rast_info.res;
          const double x_i = rast_info.xmin + (col_i + 0.5) * rast_info.res;
          
          // Distance
          const double dist = sqrt((x_j-x_i)*(x_j-x_i) + (y_j-y_i)*(y_j-y_i));
          
          // Save distance and value
          if(i == j){
            d.push_back(rast_info.res/4);
            z.push_back(i_value);
          } else if(dist &amp;lt;= radius) {
            d.push_back(dist);
            z.push_back(i_value);
          }
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sort-by-distance-and-select-top-n&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3. Sort by distance and select top n&lt;/h4&gt;
&lt;p&gt;To efficiently select only the top &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; values I have created a little helper function &lt;code&gt;findBestIndices&lt;/code&gt;. It takes a distance vector &lt;code&gt;d&lt;/code&gt; and the number of values &lt;code&gt;N&lt;/code&gt; that should be returned, and returns &lt;code&gt;N&lt;/code&gt; indices of &lt;code&gt;d&lt;/code&gt; sorted by distance. So for example if we have a vector &lt;code&gt;d = c(4,1,6,0)&lt;/code&gt; and &lt;code&gt;N = 3&lt;/code&gt;, the function returns &lt;code&gt;c(3, 1, 0)&lt;/code&gt; (C++ starts indexing from 0).&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt; findBestIndices(std::vector&amp;lt;double&amp;gt; &amp;amp;d, const int &amp;amp;N)
{   
    std::vector&amp;lt;int&amp;gt; indices(d.size());
    std::iota(indices.begin(), indices.end(), 0); // fill with 0,1,2,...

    std::partial_sort(indices.begin(), indices.begin()+N, indices.end(),
                     [&amp;amp;d](int i,int j) {return d[i]&amp;lt;d[j];});

    return std::vector&amp;lt;int&amp;gt;(indices.begin(), indices.begin()+N);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can apply this function in our main loop:&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// 3. Sort by distance and select top n
int nn = (d.size() &amp;lt; n) ? d.size() : n;

// Index of n shortest distances
std::vector&amp;lt;int&amp;gt; idx = findBestIndices(d, nn);

// And select value (z) and distance (d) in that order
std::vector&amp;lt;double&amp;gt; z_top_n;
std::vector&amp;lt;double&amp;gt; d_top_n;
for(auto t=idx.begin(); t!=idx.end(); ++t){
  z_top_n.push_back(z[*t]);
  d_top_n.push_back(d[*t]);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;compute-idw&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;4. Compute IDW&lt;/h4&gt;
&lt;p&gt;Finally, we have everything to interpolate the value for cell &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;. Again, I’ve created a small helper function &lt;code&gt;calc_idw&lt;/code&gt; that applies the equation from the beginning of this post.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;double calc_idw(std::vector&amp;lt;double&amp;gt; &amp;amp;d, std::vector&amp;lt;double&amp;gt; &amp;amp;v, const double b){
    double numerator = 0.0;
    double denominator = 0.0;
    
    // Sum from i to n
    for(std::size_t i = 0; i &amp;lt; d.size(); i++){
        numerator += v[i] / pow(d[i], b);
        denominator += 1 / pow(d[i], b);
    }
    
    return numerator/denominator;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And include it into the main loop:&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;// Compute IDW
out[j] = calc_idw(d_top_n, z_top_n, b);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;comparison-with-gstat&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Comparison with gstat&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;gstat&lt;/code&gt; R package provides a large set of functions useful for geostatistical modelling, prediction and simulation. I followed the instruction provided by the FU Berlin &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-berlin&#34; role=&#34;doc-biblioref&#34;&gt;Hartmann, Krois, and Waske 2018&lt;/a&gt;)&lt;/span&gt; and compared the results and computation time to the Rcpp method. Conveniently they have also conducted a &lt;a href=&#34;https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/geostatistics/Inverse-Distance-Weighting/Model-selection/index.html&#34;&gt;cross validation&lt;/a&gt; to select the parameters &lt;span class=&#34;math inline&#34;&gt;\(n = 43\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta = 1.5\)&lt;/span&gt; to reduce RMSE.&lt;/p&gt;
&lt;p&gt;I have packed all steps for the two approaches into the helper functions &lt;code&gt;dwd_rcpp&lt;/code&gt; and &lt;code&gt;dwd_gstat&lt;/code&gt;, you can view them &lt;a href=&#34;dwd_helper_funs.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at the visual comparison first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/iwd/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;864&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the first glance, both maps look very similar. Apparently the raster generartion using &lt;code&gt;rasterize&lt;/code&gt; results in a small spatial offset compared to the &lt;code&gt;gstat&lt;/code&gt; raster. However, the differences are marginal.&lt;/p&gt;
&lt;p&gt;Now that we know the algorithm works fine, let’s compare computation time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;load(url(&amp;quot;https://userpage.fu-berlin.de/soga/300/30100_data_sets/East_Germany.RData&amp;quot;))

library(microbenchmark)
microbenchmark(
  rcpp = dwd_rcpp(aoi = east.germany.states.sp, data = dwd.east.sp, 
                  n = 43, b = 1.5, resolution = 10000),
  gstat = dwd_gstat(aoi = east.germany.states.sp, data = dwd.east.sp, 
                    n = 43, b = 1.5, resolution = 10000)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: milliseconds
##   expr      min       lq     mean   median       uq      max neval cld
##   rcpp 215.3333 225.7391 233.3985 229.0763 233.6078 410.7200   100  a 
##  gstat 223.4818 232.3571 251.1311 237.3653 243.8096 421.1824   100   b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, both methods show very similar results. However, when we reduce the resolution (more cells) we clearly see the advantage of using Rcpp.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;microbenchmark(
  rcpp = dwd_rcpp(aoi = east.germany.states.sp, data = dwd.east.sp,
                  n = 43, b = 1.5, resolution = 1000),
  gstat = dwd_gstat(aoi = east.germany.states.sp, data = dwd.east.sp, 
                    n = 43, b = 1.5, resolution = 1000)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: seconds
##   expr      min       lq     mean   median       uq      max neval cld
##   rcpp 1.888486 1.918858 1.968413 1.962389 1.971613 2.202879   100  a 
##  gstat 2.358264 2.423042 2.533372 2.516033 2.656117 2.845171   100   b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned previously, supporting multithreading with Rcpp is simple, too. The &lt;code&gt;dwd_rcpp&lt;/code&gt; function supports multithreading, which enables us to compute rainfall interpolation for whole Germany quickly!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aoi &amp;lt;- raster::getData(country = &amp;quot;Germany&amp;quot;, level = 1) %&amp;gt;%
  st_as_sf() %&amp;gt;% 
  st_transform(3035) %&amp;gt;%
  st_union() %&amp;gt;% 
  st_as_sf()

dwd.sf &amp;lt;- st_as_sf(dwd, coords = c(&amp;quot;LON&amp;quot;,&amp;quot;LAT&amp;quot;), crs = 4326) %&amp;gt;% 
  st_transform(3035) %&amp;gt;% 
  st_intersection(aoi) %&amp;gt;% 
  rename(Rainfall = rain)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rcpp:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;time_start &amp;lt;- Sys.time()
germany_rcpp &amp;lt;- dwd_rcpp(aoi = aoi, data = dwd.sf,
                         resolution = 500, ncores = 24)
round(difftime(Sys.time(), time_start),1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 3.4 secs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gstat:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;time_start &amp;lt;- Sys.time()
germany_gstat &amp;lt;- dwd_gstat(aoi = aoi, data = dwd.sf,
                           resolution = 500)
round(difftime(Sys.time(), time_start),1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Time difference of 43.1 secs&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this post I’ve demonstrated how the IDW algorithm can be implemented in C++ using Rcpp. The results match the output of the well established &lt;code&gt;gstat&lt;/code&gt; R package. Single core computation time is lower using the Rcpp version, especially for more complex tasks (large number of observations; low raster resolution). But where the Rcpp function really stands out is the capability of multithreading. In my research of &lt;a href=&#34;https://geobrinkmann.com/post/visible-greenness-exposure/&#34;&gt;Greenspace Visibility&lt;/a&gt; I analyse millions of observer locations over a very large area of interest. Using the &lt;code&gt;gstat&lt;/code&gt; function would take a long time, but utilizing all of my cores reduces computation time significantly. However, &lt;code&gt;gstat&lt;/code&gt; also supports more complex interpolation methods (e.g. kriging).&lt;br /&gt;
As a next step I will try to include barriers as demonstrated by &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-gisgeography&#34; role=&#34;doc-biblioref&#34;&gt;GISGeography&lt;/a&gt; (&lt;a href=&#34;#ref-gisgeography&#34; role=&#34;doc-biblioref&#34;&gt;2016&lt;/a&gt;)&lt;/span&gt; to simulate the effect of noise barriers or visible obstacles.&lt;/p&gt;
&lt;p&gt;I have included the IDW interpolation algorithm in the &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GVI&lt;/a&gt; R package that also supports &lt;em&gt;LINE&lt;/em&gt; and &lt;em&gt;POLYGON&lt;/em&gt; features as the observer input:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(GVI)
germany_rcpp &amp;lt;- sf_to_rast(observer = dwd.sf, v = &amp;quot;Rainfall&amp;quot;, aoi = aoi,
                           beta = 1.5, raster_res = 1000, cores = 22)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-dunnington&#34; class=&#34;csl-entry&#34;&gt;
Dunnington, Dewey. 2019. &lt;span&gt;“Bathymetry &amp;amp; Lake Volume Estimation Using r.”&lt;/span&gt; &lt;a href=&#34;https://fishandwhistle.net/post/2019/bathymetry-lake-volume-estimation-using-r/&#34;&gt;https://fishandwhistle.net/post/2019/bathymetry-lake-volume-estimation-using-r/&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-gisgeography&#34; class=&#34;csl-entry&#34;&gt;
GISGeography. 2016. &lt;span&gt;“Inverse Distance Weighting (IDW) Interpolation.”&lt;/span&gt; &lt;a href=&#34;https://gisgeography.com/inverse-distance-weighting-idw-interpolation/&#34;&gt;https://gisgeography.com/inverse-distance-weighting-idw-interpolation/&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-berlin&#34; class=&#34;csl-entry&#34;&gt;
Hartmann, K., J. Krois, and B. Waske. 2018. &lt;span&gt;“E-Learning Project SOGA: Statistics and Geospatial Data Analysis. Department of Earth Sciences, Freie Universitaet Berlin.”&lt;/span&gt; &lt;a href=&#34;https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/geostatistics/index.html&#34;&gt;https://www.geo.fu-berlin.de/en/v/soga/Geodata-analysis/geostatistics/index.html&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-tobler1970&#34; class=&#34;csl-entry&#34;&gt;
Tobler, W. R. 1970. &lt;span&gt;“A Computer Movie Simulating Urban Growth in the Detroit Region.”&lt;/span&gt; &lt;em&gt;Economic Geography&lt;/em&gt; 46 (June): 234. &lt;a href=&#34;https://doi.org/10.2307/143141&#34;&gt;https://doi.org/10.2307/143141&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-wilke&#34; class=&#34;csl-entry&#34;&gt;
Wilke, Sören. 2020. &lt;span&gt;“A Practical Guide to Geospatial Interpolation with r.”&lt;/span&gt; &lt;a href=&#34;https://swilke-geoscience.net/post/spatial_interpolation/&#34;&gt;https://swilke-geoscience.net/post/spatial_interpolation/&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>spatLac: Spatial Lacunarity</title>
      <link>/publication/spatlac-index-r-package/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      <guid>/publication/spatlac-index-r-package/</guid>
      <description>&lt;p&gt;The &lt;code&gt;spatLac&lt;/code&gt; R package helps researchers compute Lacunarity for binary and continuous Spatial Raster objects. &lt;code&gt;spatLac&lt;/code&gt; uses fast C++ code, allowing for low memory usage and multithreading.&lt;/p&gt;
&lt;p&gt;Go on &lt;a href=&#34;https://github.com/STBrinkmann/spatLac&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GVI: Greenness Visibility Index R package</title>
      <link>/publication/gvi-greenness-visibility-index-r-package/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/publication/gvi-greenness-visibility-index-r-package/</guid>
      <description>&lt;p&gt;The GVI R package helps researchers compute the Greenness Visibility Index (GVI) presented by &lt;a href=&#34;https://doi.org/10.1016/j.scitotenv.2020.143050&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Labib, Huck and Lindley (2021)&lt;/a&gt;. The GVI is calculated using a Digital Surface Model (DSM), Digital Terrain Model (DTM) and Greenness Raster. GVI is written in C++ to provide fast and light weighted functionality.&lt;/p&gt;
&lt;p&gt;Go on &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visible Greenness Exposure Index - An example workflow for the City of Vancouver</title>
      <link>/post/visible-greenness-exposure-index-an-example-workflow-for-the-city-of-vancouver/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/post/visible-greenness-exposure-index-an-example-workflow-for-the-city-of-vancouver/</guid>
      <description>


&lt;p&gt;In a previous posts I have &lt;a href=&#34;https://geobrinkmann.com/post/visible-greenness-exposure/&#34;&gt;introduced the Viewshed Greenness Visibility Index (VGVI)&lt;/a&gt; and demonstrated, &lt;a href=&#34;https://geobrinkmann.com/post/visibility-sensitivity-analysis/&#34;&gt;how to fine tune the parameters for calculateing the viewsheds&lt;/a&gt;. In cooperation with &lt;a href=&#34;https://www.smlabib.com/&#34;&gt;Dr. S.M. Labib&lt;/a&gt; we have build the R package &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GVI&lt;/a&gt;, to easily calculating VGVI’s. The VGVI expresses the proportion of visible greenness to the total visible area and is calculated using a viewshed based on a Digital Surface Model (DSM). There are other methods to compute visible greenness, for example using Google Street View panorama images instead of a DSM (&lt;a href=&#34;https://doi.org/10.1016/j.ufug.2015.06.006&#34;&gt;Li &lt;em&gt;et al.&lt;/em&gt; 2015&lt;/a&gt;). Though the method we present has some advantages, as DSM and Landuse data is already being provided for public use for many regions worldwide. Furthermore, it is very easy to not only compute the overall visible greenness, but - for example - compute visible tree-coverage or visible blue-space. Such information is important to understand how specific build environment features affect health. I will demonstrate how to calculate visible tree-coverage in the end of this post.&lt;/p&gt;
&lt;p&gt;On the &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GitHub website&lt;/a&gt; we have already provided examples on how to use the functions. However, a use case of this R package for researchers is to compute the VGVI for a large study area.&lt;br /&gt;
Therefore, in this post, I’d like to provide a workflow for a large area of interest, using the City of Vancouver as my study area. GVI uses a fast viewshed implementation that is most efficient for larger areas. In our recent &lt;a href=&#34;https://geobrinkmann.com/publication/brinkmann_2022/&#34;&gt;paper&lt;/a&gt; we describe this novel algorithm in detail.&lt;/p&gt;
&lt;div id=&#34;input&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;p&gt;To compute the VGVI we need three raster layers: (1) the Digital Terrain Model (DEM) and (2) Digital Surface Model (DSM) and (3) a Greenspace Mask. The Greenspace Mask is a binary raster based on a Land Cover Classification map, where 1 = vegetation and 0 = no vegetation. I have also included bluespaces (e.g. lakes and rivers) to the greenspace mask with the value 1, since these features also seem to provide mental health benefits (&lt;a href=&#34;https://doi.org/10.1038/s41598-021-87675-0&#34;&gt;White &lt;em&gt;et al.&lt;/em&gt; 2021&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The data can be downloaded from &lt;a href=&#34;https://doi.org/10.5281/zenodo.5061256&#34;&gt;Zenodo&lt;/a&gt; and read in R like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;### Load libraries
library(terra) # handling raster data
library(sf)    # handling shapefiles
library(GVI)   # computing the VGVI
library(dplyr) # data wrangeling

# Folder where the data has been downloaded
workdir &amp;lt;- &amp;quot;H:/Vancouver/Vancouver_Sample_Data/&amp;quot;

# Load DTM, DSM and Land Cover
dtm &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_DTM_1m.tif&amp;quot;))
dsm &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_DSM_1m.tif&amp;quot;))
lulc &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_LULC_2m.tif&amp;quot;))

# Reclassify values for the binary greenspace mask

rcl_mat &amp;lt;- matrix(c(1, 6, 0,    # no vegetation
                    6, 13, 1,   # vegetation and water
                    13, 14, 0), # no vegetation
                  ncol = 3, byrow = TRUE)

greenspace &amp;lt;- classify(lulc, rcl = rcl_mat, include.lowest = TRUE)
writeRaster(greenspace, file.path(workdir, &amp;quot;Vancouver_GS_2m.tif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below I have provided a interactive map of a smaller region, to compare the DTM, DSM and Landuse. In &lt;a href=&#34;https://geobrinkmann.com/post/visible-greenness-exposure/#section-greenspace-mask&#34;&gt;my other post&lt;/a&gt; I have also listed all classes of the Landuse map in detail.&lt;/p&gt;
&lt;iframe frameborder=&#34;0&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34; style=&#34;display:block; width:95%; height:85vh;&#34; src=&#34;https://h2961284.stratoserver.net/content/leaflets/VGVI%20Input/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;We also need the observer locations where the VGVI should be computed. In our example we could simply use all coordinates of the whole DSM. However, we can’t compute the VGVI from inside buildings, and it wouldn’t make sense to compute VGVI on water (unless you are interested in the view of stand-up paddlers). Therefore, in the next step we only use the coordinates of useful cells from the Land Cover Classification map and convert it to a sf-POINT feature.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Useful Landcover Classification codes
useful_codes &amp;lt;- c(2:11, 13)

# Get XY-coordinates
xy_coords &amp;lt;- xyFromCell(lulc, which(values(lulc) %in% useful_codes)) %&amp;gt;% 
  as_tibble()

# Convert to shapefile
vancouver_2m_sf &amp;lt;- st_as_sf(xy_coords, coords = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;), crs = 26910)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vgvi&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;VGVI&lt;/h2&gt;
&lt;p&gt;Before computing the VGVI using the &lt;code&gt;vgvi_from_sf&lt;/code&gt; function from our GVI R package, I would recommend to think about some important parameters. I have partially covered this in my last &lt;a href=&#34;https://geobrinkmann.com/post/visibility-sensitivity-analysis/&#34;&gt;post&lt;/a&gt;, where I talked about the parameters &lt;em&gt;raster_res&lt;/em&gt; and &lt;em&gt;max_distance&lt;/em&gt;. So far, we have not provided recommendations for fitting the weights parameters &lt;em&gt;m&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;mode&lt;/em&gt;, because we need to conduct more research in this area. However, in our study area, m = 1 and b = 3, using the exponential function (see plot below) for calculating the distance decay weights seems sufficient.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;weights_example.svg&#34; width=&#34;351&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Computing VGVI for a large area using multiple CPU cores can be RAM expensive. In addition to that, loading the complete &lt;em&gt;Vancouver_2m_xy.gpkg&lt;/em&gt; shapefile into the R session is very RAM expensive, too. GVI is programmed using OpenMP under the hood for parallel C++ computation. This way, the computation is more efficient and faster. On my system computation time for all 16,741,566 points took 2 hours using 22 cores with a RAM usage of ~ 20GB.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set your cores here!
cores &amp;lt;- 22

# Set workdir
workdir &amp;lt;- &amp;quot;H:/Vancouver/Vancouver_Sample_Data/&amp;quot;

# Make dir for saving the VGVI output continuously
dir.create(file.path(workdir, &amp;quot;out&amp;quot;))

# Load raster data
dtm &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_DTM_1m.tif&amp;quot;))
dsm &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_DSM_1m.tif&amp;quot;))
greenspace &amp;lt;- rast(file.path(workdir, &amp;quot;Vancouver_GS_2m.tif&amp;quot;))

vancouver_vgvi &amp;lt;- vgvi_from_sf(observer = vancouver_2m_sf,
                                 dsm_rast = dsm, 
                                 dtm_rast = dtm, 
                                 greenspace_rast = greenspace,
                                 max_distance = 550, observer_height = 1.7,
                                 raster_res = 2,
                                 m = 1, b = 3, mode = &amp;quot;exponential&amp;quot;,
                                 cores = cores, 
                                 folder_path = file.path(workdir, &amp;quot;out&amp;quot;),
                                 progress = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;vgvi-to-raster&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;VGVI to Raster&lt;/h2&gt;
&lt;p&gt;In most cases we prefer working with raster layers instead of millions of point features. Therefore, we will combine all the VGVI points from the previous step and convert them to a single raster. We will do so using &lt;a href=&#34;https://geobrinkmann.com/post/iwd/&#34;&gt;Inverse Distance Weighting interpolation&lt;/a&gt;. Computation time was ~ 2.5 hours, so total computation time was 3.5 hours using 22 cores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We need an AOI shapefile first
aoi &amp;lt;- greenspace &amp;gt;= 0
aoi &amp;lt;- sf::st_as_sf(terra::as.polygons(aoi))

vgvi_idw &amp;lt;- GVI::sf_to_rast(observer = vancouver_vgvi, v = &amp;quot;VGVI&amp;quot;,
                            aoi = aoi,
                            max_distance = 400, n = 10,
                            raster_res = 10, beta = 2,
                            cores = 22, progress = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure-index-an-example-workflow-for-the-city-of-vancouver/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tree-coverage-visibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tree-Coverage Visibility&lt;/h2&gt;
&lt;p&gt;As already mentioned in the beginning, it may be of interest to model visible tree-cover or visible blue-spaces or similar visibility assessments. Since we used a Landcover Classification map for differentiating between green vs. no-green, it is now very simple and straight forward to analyze visible tree-cover. As we did before, we need to classify coniferous and deciduous trees as 1, and the rest as 0.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rcl_mat &amp;lt;- matrix(c(1, 6, 0,    # no trees
                    6, 8, 1,    # coniferous and deciduous trees
                    8, 14, 0),  # no trees
                  ncol = 3, byrow = TRUE)

tree_cover &amp;lt;- classify(lulc, rcl = rcl_mat, include.lowest = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on this new binary tree-cover mask, the Viewshed Tree-Cover Visibility Index (VTVI) can be calculated using the scripts from above. I have excluded observer locations that are underneath trees. Below you can see the result of the VGVI and VTVI. As you can see, they have not been computed for areas with buildings or water. In the VGVI layer you can also see, that cells which are located underneath trees have an extremely high VGVI value. This is because the viewshed algorithm can’t “see” beyond those trees and returns only one single visible cell, which is green. We are currently working on ways for solving this limitation.&lt;/p&gt;
&lt;iframe frameborder=&#34;0&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34; style=&#34;display:block; width:95%; height:85vh;&#34; src=&#34;https://h2961284.stratoserver.net/content/leaflets/VGVI%20Output/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;p&gt;When looking at the VTVI layer, higher values are rarely achieved because it is generally harder to view trees compared to overall vegetation. The Langara Golf Course in the south and the Little Mountain park in the north are the two areas with the highest VTVI values. The residential area in the east also achieved relatively high values. This might be explained by the very large London plane trees (&lt;em&gt;Platanus × acerifolia&lt;/em&gt;), European beech trees (&lt;em&gt;Fagus sylvatica&lt;/em&gt;) and horse chestnut trees (&lt;em&gt;Aesculus hippocastanum&lt;/em&gt;) that have been planted in the side alleys.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visibility - Sensitivity Analysis</title>
      <link>/post/visibility-sensitivity-analysis/</link>
      <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/post/visibility-sensitivity-analysis/</guid>
      <description>
&lt;script src=&#34;/post/visibility-sensitivity-analysis/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;As part of my Bachelor Thesis I am analyzing the effects of visible green- and bluespaces on mental health based on a medical study in Vancouver. The area of interest covers Vancouver City, Burnaby and Surrey.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To analyze the effect of visible greenness I’ll be using the &lt;a href=&#34;https://doi.org/10.1016/j.scitotenv.2020.143050&#34;&gt;Viewshed Greenness Visibility Index (VGVI)&lt;/a&gt;. The VGVI expresses the proportion of visible greenness to the total visible area based on a viewshed. The estimated VGVI values range between 0 and 1, where 0 = no green cells are visible, and 1 = all of the visible cells are green. In a recent &lt;a href=&#34;https://geobrinkmann.com/post/visible-greenness-exposure/&#34;&gt;post&lt;/a&gt; I have demonstrated how to calculate the VGVI, and in my R package &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GVI&lt;/a&gt; (currently only available on GitHub) I have provided fast functions to compute the VGVI.&lt;/p&gt;
&lt;p&gt;To calculate the VGVI for an observer, the viewshed of this point needs to be computed first - hence the name &lt;strong&gt;&lt;em&gt;Viewshed&lt;/em&gt;&lt;/strong&gt; Greenness Visibility Index. The &lt;a href=&#34;https://github.com/STBrinkmann/GVI#viewshed&#34;&gt;&lt;em&gt;viewshed&lt;/em&gt;&lt;/a&gt; function of the GVI package does exactly that. The basic idea is to apply a buffer on the observer position. Now we can “simply” check every point in this area, whether it is visible or not.&lt;br /&gt;
To do so, we need a Digital Surface Model (DSM), Digital Terrain Model (DTM) and the observer location as input data for the &lt;em&gt;viewshed&lt;/em&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load libraries
library(dplyr)
library(sf)
library(GVI)
library(terra)

workdir &amp;lt;- &amp;quot;H:/Vancouver/Vancouver_RS_Data/&amp;quot;

# Load DSM and DEM
dsm &amp;lt;- rast(file.path(workdir, &amp;quot;DSM.tif&amp;quot;))
dtm &amp;lt;- rast(file.path(workdir, &amp;quot;DTM.tif&amp;quot;))

# Sample observer location
st_observer &amp;lt;- sfheaders::sf_point(c(487616.2, 5455970)) %&amp;gt;% 
    st_sf(crs = st_crs(26910))

# Compute Viewshed
viewshed_1 &amp;lt;- GVI::viewshed(observer = st_observer,
                            dsm_rast = dsm, dtm_rast = dtm,
                            max_distance = 250, resolution = 1,
                            observer_height = 1.7, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the plot above, the Digital Surface Model (DSM) is visualized on the left. The viewshed is shown on the right, where green = visible and yellow = no-visible area. The observer in the example - visualized as the red dot - can see far over the sports field to the west and has little visibility to the east.&lt;/p&gt;
&lt;p&gt;Next, we would compute the VGVI based on the viewshed and a greenspace mask. However, in this post I would like to focus on the two parameters &lt;em&gt;distance&lt;/em&gt; and &lt;em&gt;resolution&lt;/em&gt;. Distance describes the radius of the buffer around the observer location. The resolution parameter describes the resolution that the rasters should be aggregated to. High resolution yields the most realistic results, but on cost of computation time.&lt;/p&gt;
&lt;div id=&#34;sensitivity-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sensitivity Analysis&lt;/h2&gt;
&lt;p&gt;When computing the VGVI for a single, or few points, you wouldn’t need to consider using a lower resolution or adjusting the maximum distance. The computation time is rather low even at high resolution with a high maximum distance (e.g. 800m with 1m resolution: 5.5 secs). However, when computing the VGVI for a larger area - like the whole City of Vancouver - it is very important to consider these parameters. In the following I conduct a sensitivity analysis for the two parameters.&lt;/p&gt;
&lt;div id=&#34;samples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;p&gt;For the sensitivity analysis of the two parameters I’ll use a representative sample of 4000 observer locations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1234)

# Grab 4000 random points. The Van_2m_xy.gpkg file has 108.320.000 points
fid_sample &amp;lt;- sample(1:108320000, 4000)

# Read the shapefile using an SQL statement
my_query = paste(&amp;quot;SELECT * FROM \&amp;quot;Van_2m_xy\&amp;quot; WHERE fid IN (&amp;quot;, toString(fid_sample), &amp;quot;)&amp;quot;)
sf_sample &amp;lt;- st_read(file.path(workdir, &amp;quot;Van_2m_xy.gpkg&amp;quot;),
                 query = my_query,
                 quiet = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;distance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Distance&lt;/h3&gt;
&lt;p&gt;In the example above I have used a distance of only 250 meters. Below I have computed the VGVI for the same observer location, but with a 800 meter radius.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute Viewshed
viewshed_2 &amp;lt;- GVI::viewshed(observer = st_observer,
                            dsm_rast = dsm, dtm_rast = dtm,
                            max_distance = 800, resolution = 1,
                            observer_height = 1.7, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Increasing the distance to 800 meters doesn’t really affect the visible area. Most of what can be seen at this specific observer location, is withing the smaller 250 m radius. But the computation time decreases from 5.5 to 0.3 seconds!&lt;/p&gt;
&lt;p&gt;Therefore, it’s important to investigate if the relationship between distance and visible area. The function below calculates the proportion of visible area for each distance value of the viewshed raster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;visibleDistance &amp;lt;- function(x) {
  # Get XY coordinates of cells
  xy &amp;lt;- terra::xyFromCell(x, which(!is.na(x[])))
  
  # Calculate euclidean distance from observer to cells
  centroid &amp;lt;- colMeans(terra::xyFromCell(x, which(!is.na(x[]))))
  dxy = round(sqrt((centroid[1] - xy[,1])^2 + (centroid[2] - xy[,2])^2))
  dxy[dxy==0] = min(dxy[dxy!=0])
  
  # Combine distance and value
  cbind(dxy, unlist(terra::extract(x, xy), use.names = FALSE)) %&amp;gt;%
    as_tibble() %&amp;gt;% 
    rename(visible = V2) %&amp;gt;% 
    arrange(dxy) %&amp;gt;% 
    group_by(dxy) %&amp;gt;% 
    # Mean visible area for each distinct distance value
    summarise(visible = mean(visible)) %&amp;gt;% 
    ungroup() %&amp;gt;% 
    return()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s apply it on the second viewshed:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Distance&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Visibility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;100.0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;796&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;797&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;798&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;799&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;800&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To find the specific distance threshold of my area of interest, I’ll use the sample of 4000 points and compute the viewshed and proportion of visible area for each distance value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for(i in 1:nrow(sf_sample)) {
  # Viewshed
  this_dist &amp;lt;- viewshed(observer = sf_sample[i, ], max_distance = 1000,
                        dsm_rast = dsm, dtm_rast = dtm) %&amp;gt;%
    # Costum function 
    visibleDistance()
  
  # Add to &amp;quot;out&amp;quot;
  if (i == 1) {
    out &amp;lt;- this_dist
  } else {
    out &amp;lt;- rbind(out, this_dist)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The plot below indicates, that visibility decreases with increasing distance. Interestingly, there are two distance levels where visibility increases locally, at 250 m and 500 m. This might be due to city planning effects. Most points are located at streets, maybe parks are planned to be evenly distributed in the Vancouver Metropolitan area for close, equal access.&lt;/p&gt;
&lt;p&gt;Based on this analysis I set the distance parameter to 550 meters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;resolution&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Resolution&lt;/h3&gt;
&lt;p&gt;The resolution parameter describes the resolution that the rasters should be aggregated to. Using the distance value of 550 meters, the viewshed with a 1 m resolution has 1.210.000 cells and takes 1 second. A viewshed with 5 meter resolution has 48.400 cells and takes only 0.5 seconds to compute. However, higher resolution yields in more accurate results. Below I have provided an example for comparison.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The function below calculates the similarity of visibility for each resolution compared to the 1 meter resolution.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;compare_resolution &amp;lt;- function(observer, dsm_path, dtm_path) {
  viewshed_tbl &amp;lt;- lapply(c(1, 2, 5, 10), FUN = function(x) {
    # Get values of viewshed with resolution x
    time_a &amp;lt;- Sys.time()
    all_value &amp;lt;- viewshed(observer = observer, dsm_rast = rast(dsm_path), dtm_rast = rast(dtm_path),
                          max_distance = 550, observer_height = 1.7, resolution = x) %&amp;gt;%
      values() %&amp;gt;%
      na.omit()
    time_b &amp;lt;- Sys.time()
    
    # Return Distance, proportion of visible area and computation time
    return(tibble(
      Resolution = x,
      Similarity = length(which(all_value == 1)) / length(all_value),
      Time = as.numeric(difftime(time_b, time_a, units = &amp;quot;secs&amp;quot;))
    ))
  }) %&amp;gt;% 
    do.call(rbind, .)
  
  viewshed_tbl %&amp;gt;% 
    rowwise() %&amp;gt;% 
    mutate(Similarity = min(viewshed_tbl[1,2], Similarity) / max(viewshed_tbl[1,2], Similarity)) %&amp;gt;% 
    return()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The boxplots below confirm the assumption, that similarity decreases with increasing resolution. Mean computation time for 1 m, 2 m, 5 m and 10 m resolution was 4.80 seconds, 1.05 seconds, 0.85 seconds and 0.75 seconds, respectively. A resolution of 2 meters seems to be a optimal compromise, as it has a ~75% similarity, but the computation time decreases to about &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{5}\)&lt;/span&gt;, too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visibility-sensitivity-analysis/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post I have conducted a sensitivity analysis on the parameters distance and resolution for the viewshed function in the Vancouver Metropolitan Area. The thresholds for the distance and resolution is 550 meters and 2 meters, respectively.&lt;br /&gt;
The complete study area contains 108.320.000 points, computation time on a high performance server is ~20 days. Therefore, it is important to critically think about these parameters beforehand.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>BART - A Bayesian machine learning workflow for complex spatial data</title>
      <link>/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/</guid>
      <description>
&lt;script src=&#34;/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/index.en_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/index.en_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;
&lt;p&gt;In our &lt;a href=&#34;https://geobrinkmann.com/publication/scarpone2020/&#34;&gt;recent publication from 2020&lt;/a&gt; we analyzed COVID-19 incidence and socioeconomic, infrastructural, and built environment characteristics using a multimethod approach. There are 401 counties in Germany; as shown in the figure below, these vary in size, such that the counties in Southern Germany are generally smaller with higher population densities. Natural log-transformed age-adjusted incidence rates of COVID-19 as of April 1st are shown, indicating spatial variation between the northeast and south-southwest of the study area. &lt;img src=&#34;Incidence_rates_map.svg&#34; style=&#34;width:60.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After conducting a throughout spatial exploratory analysis, we used a Bayesian Additive Regression Trees (BART; &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-Chipman2010&#34; role=&#34;doc-biblioref&#34;&gt;Chipman, George, and McCulloch&lt;/a&gt; (&lt;a href=&#34;#ref-Chipman2010&#34; role=&#34;doc-biblioref&#34;&gt;2010&lt;/a&gt;)&lt;/span&gt;) model, to identify important socioeconomic and built environment covariates with COVID-19 incidence rate. BART is a ensemble-of-trees method, such as random forests &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-breiman2001&#34; role=&#34;doc-biblioref&#34;&gt;Breiman 2001&lt;/a&gt;)&lt;/span&gt; and stochastic gradient boosting &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-friedman2002&#34; role=&#34;doc-biblioref&#34;&gt;Friedman 2002&lt;/a&gt;)&lt;/span&gt;.&lt;br /&gt;
Tree-based regression models have an advantage, as they can flexibly fit interactions and non-linearities. A sum-of-trees model - such as BART or random forest - has an even greater ability than a single-tree model. However, BART differs from these two examples, as it uses a underlying Bayesian probability model rather than a pure algorithm &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-kapelner2016&#34; role=&#34;doc-biblioref&#34;&gt;Kapelner and Bleich 2016&lt;/a&gt;)&lt;/span&gt;. One of the advantages of using a Bayesian approach is, that it computes Bayesian posterior distributions to approximate the nonparametric model parameters. The priors aim to prevent a single regression from dominating, thus reducing the risk of overfitting &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-kapelner2016&#34; role=&#34;doc-biblioref&#34;&gt;Kapelner and Bleich 2016&lt;/a&gt;; &lt;a href=&#34;#ref-scarpone2020&#34; role=&#34;doc-biblioref&#34;&gt;Scarpone et al. 2020&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For our analysis we have used the R package &lt;code&gt;bartMachine&lt;/code&gt; &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-kapelner2016&#34; role=&#34;doc-biblioref&#34;&gt;Kapelner and Bleich 2016&lt;/a&gt;)&lt;/span&gt;. Unfortunately &lt;code&gt;bartMachine&lt;/code&gt; does not support tibble objects as input features, but apart from that it’s intuitive and simple to use.&lt;br /&gt;
In this post I will use the data we have used in our COVID-19 paper, to analyze age-adjusted incidence rates of COVID-19 for German counties. Even though the BART model has great predictive power, we will not use it to predict new cases of COVID-19, but rather use it as a exploratory tool to understand, what factors contribute to the spreading of COVID-19 and how they interact with the incidence rate.&lt;/p&gt;
&lt;p&gt;I want to make it clear, that I will use data of one specific date. We have chosen the 1st April 2020, to analyze only the first wave of COVID-19 in Germany. A friend of mine currently analyses what effects contributed to the second and third waves. Even though there are many factors, that kept being important, many features gained or lost importance and some even showed a inverted effect.&lt;/p&gt;
&lt;p&gt;Therefore, BART is used as an exploratory tool and with the help of Partial Dependence Plots we will gain insight of the marginal effects of the important predictors of COVID-19.&lt;/p&gt;
&lt;p&gt;I will not focus on pre-modelling exploratory data analysis, nor explain the data engineering here. But feel free to read the &lt;a href=&#34;https://geobrinkmann.com/publication/scarpone2020/&#34;&gt;paper&lt;/a&gt; or &lt;a href=&#34;https://geobrinkmann.com/#contact&#34;&gt;contact me&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;data-download-and-pre-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data download and pre-processing&lt;/h2&gt;
&lt;p&gt;First, we need to load the packages and set the memory size and number of cores that &lt;code&gt;bartMachine&lt;/code&gt; should be using.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set to use 45 GB memory - adjust this to your resources
options(java.parameters = &amp;quot;-Xmx45g&amp;quot;)

# Load packages
library(bartMachine)
library(dplyr)

# Set to run on 20 threads - adjust this to your resources
set_bart_machine_num_cores(20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## bartMachine now using 20 cores.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would suggest, that you double check if the correct amount of RAM has been made available, when loading &lt;code&gt;bartMachine&lt;/code&gt;. If the message states a completely different amount of memory, try to manually write the java.parameters string, instead of copy&amp;amp;pasting.&lt;/p&gt;
&lt;p&gt;Next, we need to download the data and normalize the church density (&lt;em&gt;Rch_den&lt;/em&gt;) variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function for linear stretching. New range: 0-1
range0_1 &amp;lt;- function(x){(x-min(x))/(max(x)-min(x))}

# Download data
data &amp;lt;- read.csv(&amp;quot;https://github.com/CHEST-Lab/BART_Covid-19/raw/master/Data/GermanyTraining.csv&amp;quot;,
                 stringsAsFactors = F) %&amp;gt;%
  mutate(Rch_den = range0_1(Rch_den),
         NUTS2_Fact = as.factor(NUTS2_Fact), 
         BL_ID = as.factor(BL),
         S_109 = as.factor(S_109))

# Select variables: Lat/ Long, BL, NUTS2, socioeconomic, build environment and age adjusted case rate
data &amp;lt;- data[c(374, 3, 4, 5, 38, 28, 65:372)]&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:90%; font-family: &amp;quot;Arial Narrow&amp;quot;, &amp;quot;Source Sans Pro&amp;quot;, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34; class=&#34; lightable-classic lightable-striped&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
AdjRate
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
X
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Y
&lt;/th&gt;
&lt;th style=&#34;text-align:left;font-weight: bold;&#34;&gt;
NUTS2_Fact
&lt;/th&gt;
&lt;th style=&#34;text-align:left;font-weight: bold;&#34;&gt;
BL_ID
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
EWZ
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_001
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_002
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_003
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_004
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_005
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_006
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_007
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_008
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_009
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_010
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_011
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_012
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_013
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_014
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_015
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_016
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_017
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_018
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_019
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_020
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_021
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_022
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_023
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_024
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_025
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_026
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_027
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_028
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_029
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_030
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_031
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_032
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_033
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_034
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_035
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_036
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_037
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_038
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_039
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_040
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_041
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_042
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_043
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_044
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_045
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_046
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_047
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_048
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_049
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_050
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_051
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_052
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_053
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_054
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_055
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_056
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_057
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_058
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_059
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_060
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_061
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_062
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_063
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_064
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_065
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_066
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_067
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_068
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_069
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_070
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_071
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_072
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_073
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_074
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_075
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_076
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_077
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_078
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_079
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_080
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_081
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_082
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_083
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_084
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_085
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_086
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_087
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_088
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_089
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_090
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_091
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_092
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_093
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_094
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_095
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_096
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_097
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_098
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_099
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_100
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_101
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_102
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_103
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_104
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_105
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_106
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_107
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_108
&lt;/th&gt;
&lt;th style=&#34;text-align:left;font-weight: bold;&#34;&gt;
S_109
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_110
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_111
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_112
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_113
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_114
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_115
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_116
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_117
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_118
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_119
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_120
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_121
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_122
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_123
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_124
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_125
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_126
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_127
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_128
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_129
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_130
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_131
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_132
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_133
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_134
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_135
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_136
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_137
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_138
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_139
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_140
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_141
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_142
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_143
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_144
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_145
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_146
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_147
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_148
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_149
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_150
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_151
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_152
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_153
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_154
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_155
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_156
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_157
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_158
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_159
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_160
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_161
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_162
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_163
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_164
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_165
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_166
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_167
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_168
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_169
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_170
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_171
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_172
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_173
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_174
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_175
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_176
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
M_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
T_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
P_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
T_km2_1
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
All_R_2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
M_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
T_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
P_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
S_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
T_pop_1
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
All_R_p
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
tot_R
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
lib_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
uni_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sch_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cll_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
kid_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ply_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
the_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ngh_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cin_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
pub_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bar_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
std_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sc_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
hsp_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
doc_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
mll_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
dc_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
con_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sup_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
pst_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
th_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cc_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
nh_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ac_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
phr_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
rst_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ff_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
caf_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
fc_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bir_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bak_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
chm_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
dot_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
har_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
prk_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rch_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rmu_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rth_km2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
All_P_2
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
lib_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
uni_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sch_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
coll_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
kid_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
play_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
thea_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
nigh_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cin_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
pub_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bar_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
stad_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sc_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
hosp_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
doc_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
mall_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
dc_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
con_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sup_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
post_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
th_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cc_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
nh_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ac_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
phar_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
rest_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ff_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cafe_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
fc_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bier_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bake_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
chem_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
doit_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
hair_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
park_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rch_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rmu_pop
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Roth_pp
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
All_P_p
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
tot_P
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
lib_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
uni_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sch_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
coll_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
kid_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
play_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
thea_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
nigh_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cin_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
pub_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bar_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
stad_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sc_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
hosp_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
doc_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
mall_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
dc_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
con_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
sup_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
post_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
th_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cc_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
nh_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ac_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
phar_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
rest_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
ff_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
cafe_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
fc_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bier_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
bake_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
chem_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
doit_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
hair_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
park_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rch_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Rmu_den
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Roth_dn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
All_P_d
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Pop_Den
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.78
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
89504
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-10.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
74.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
78.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
109.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1527
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2333
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1278.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2986
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24258
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3375
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2992
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3373
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2965.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4568.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
444.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
369.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
123.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
371.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1282.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
767.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
156
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2309
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13725
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
134.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
543
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
602
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
180
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
478
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
131.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42826.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
134.66
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.67
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
93.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
68.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.86
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
684.89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
613
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4566
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.32
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
247548
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
310.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
136.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.64
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
127.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1564
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1293.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3304
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3296
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3693
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3844.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
886.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
383.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
295.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
74.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
67.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
399.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2269.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
74.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
755.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.4
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
209
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3112
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22801
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
146.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
64
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
460
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
415
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
590
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
193
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
436
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
108.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45821.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.69
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.66
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
107.42
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
265.92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.67
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.61
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.34
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.42
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.64
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.69
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
487.18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1206
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6862
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.73
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.87
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
217198
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
176.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.72
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
104.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
163
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2593
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1298.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3036
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26859
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3784
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3055
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3324
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2718.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
152.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2028.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
442.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
393.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
156.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
375.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3039.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
724.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.9
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
101
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1454
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22491
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
132.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
532
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
707
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
705
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
276
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
444
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
109.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
87.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38078.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
95.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.54
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
326.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.44
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.88
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.79
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73.21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.68
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.78
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
86.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.59
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.46
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.84
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
840.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1825
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6487
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.98
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.08
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79487
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
78.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
78.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.92
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2464
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1316.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2842
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42238
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3433
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2872
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3012
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2184.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7671.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
563.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
448.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
126.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
158.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
337.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1650.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
775.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.5
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1108
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1645
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26087
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
133.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.99
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
588
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
645
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
682
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
187
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
514
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
129.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39620.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.43
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
136.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
108.19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.56
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.81
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.39
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.32
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
265.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
211
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3521
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.13
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
133210
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.96
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1793
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2317
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1260.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2914
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3343
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2924
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3248
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
844.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
402.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1607.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
518.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
411.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
125.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
366.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1831.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
824.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
74
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
93
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
122
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11103
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.64
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1864
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
248
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1823
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
576
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
583
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-15.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-0.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31456.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.89
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
297.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
262.48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
698.35
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
930.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.45
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
78.82
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.78
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
481.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
641
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4041
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.59
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
108
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Schleswig-Holstein
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
197264
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
114.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
136.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80.58
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1903
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2404
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1257.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2832
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54979
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3404
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
287
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3031
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1344.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1673.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2476.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
490.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
406.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
111.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
126.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
474.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1251.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
791.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
155
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
193
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35799
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1545
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2042
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1804
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
343
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
572
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-52.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
-0.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.85
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21795.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.78
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
153.91
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
193.65
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
502.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
990.34
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.05
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.69
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.33
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
64.38
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.52
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.53
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.76
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.62
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.78
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.97
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.94
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.37
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
439.51
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
867
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4296
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The first column (&lt;em&gt;AdjRate&lt;/em&gt;) contains age-adjusted incidence rates. The X and Y coordinates (longitude and latitude) contain the spatial information. The NUTS2 code represents the government regions (Regierungsbezirke) ID, &lt;em&gt;BL_ID&lt;/em&gt; contains the name of the federal state (Bundesland) and EWZ refers to the population count. After that follows a ton of socioeconomic, infrastructural, and built environment characteristics. We will thin out the important features later and talk about their meaning, so don’t worry about the coding of the variables.&lt;/p&gt;
&lt;p&gt;BART needs a data.frame of predictors and a vector of the response variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;psych::skew(data$AdjRate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.64179&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Response variable
y &amp;lt;- log(data$AdjRate)

# Data.frame of predictors
data_bm &amp;lt;- select(data, -c(AdjRate))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AdjRate is highly skewed (skewness = 3.64) and was therefore log-transformed. The results from the BART machine won’t differ with the highly skewed data, since it is non-parametric. However, to improve visual interpretability, we will use the log-rate in all the figures.&lt;br /&gt;
Below I have printed the summary statistics of the AdjRate (log), to understand the model outputs.&lt;/p&gt;
&lt;table class=&#34; lightable-classic lightable-striped&#34; style=&#34;font-family: &amp;quot;Arial Narrow&amp;quot;, &amp;quot;Source Sans Pro&amp;quot;, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Mean
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
SD
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Min
&lt;/th&gt;
&lt;th style=&#34;text-align:right;font-weight: bold;&#34;&gt;
Max
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.75
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.51
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;first-bart-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;First BART model&lt;/h2&gt;
&lt;p&gt;It would be fine to use the default values for the hyperparameter (e.g. number of trees), however &lt;code&gt;bartMachine&lt;/code&gt; comes with a simple function to compute optimal hyperparameters, called &lt;code&gt;bartMachineCV&lt;/code&gt;. This will take quite some time to run! Therefore I have excluded this function from the script and just build a bartMachine with the optimal parameters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bm_All &amp;lt;- bartMachine(X = data_bm, y = y, 
                      k=2, nu=3, q=0.9, num_trees=100, 
                      num_iterations_after_burn_in=2000, 
                      num_burn_in = 300, 
                      seed = 1234, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in build_bart_machine(X, y, Xy, num_trees, num_burn_in, num_iterations_after_burn_in, : Setting the seed when using parallelization does not result in deterministic output.
## If you need deterministic output, you must run &amp;quot;set_bart_machine_num_cores(1)&amp;quot; and then build the BART model with the set seed.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(bm_All)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## bartMachine v1.2.6 for regression
## 
## training data n = 401 and p = 366 
## built in 7.3 secs on 20 cores, 100 trees, 300 burn-in and 2000 post. samples
## 
## sigsq est for y beforehand: 0.024 
## avg sigsq estimate after burn-in: 0.08411 
## 
## in-sample statistics:
##  L1 = 56.04 
##  L2 = 13.1 
##  rmse = 0.18 
##  Pseudo-Rsq = 0.9323
## p-val for shapiro-wilk test of normality of residuals: 0.00087 
## p-val for zero-mean noise: 0.96076&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Pseudo-R² of 0.93 and RMSE of 0.18 look quiet promising, but let’s check for error assumptions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check_bart_error_assumptions(bm_All)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorAssumption.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Both plots look good. In the second one (Assessment of Heteroskedasticity) we can detect a visible pattern - however not a prominent one! From both plots I would assume that the overall performance of the model is good, however it might struggle with extreme values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_y_vs_yhat(bm_All, credible_intervals = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;yVSyhat.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The “Fitted vs. Actual Values” plot above indicates overall good model performance. Again, we can see that the model struggles with extreme values. Low values will be over-predicted and high values will be under-predicted. We could also map the residuals geographically and see, if there is spatial clustering. But first, we will reduce the model complexity by removing non-important variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;variable-selection&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Variable Selection&lt;/h2&gt;
&lt;p&gt;BART is quiet a powerful machine learning tool, but there is more to it than amazing R² values! If you are dealing with a high dimensional data set (like our data with 313 predictors), often only a relatively small subset of predictor variables truly influences the response variable. Occam’s razor describes this philosophy, that simpler models should be preferred to unnecessarily complex ones.&lt;br /&gt;
The &lt;code&gt;var_selection_by_permute&lt;/code&gt; function performs variable selection introduced by &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-bleich2014&#34; role=&#34;doc-biblioref&#34;&gt;Bleich et al.&lt;/a&gt; (&lt;a href=&#34;#ref-bleich2014&#34; role=&#34;doc-biblioref&#34;&gt;2014&lt;/a&gt;)&lt;/span&gt;, to reduce model complexity. Let’s run the next chunk and investigate the most important variables. You may skip this step and just use my results, as this will take quiet long to run…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Leave the num_trees_for_permute small, to force variables to compete for entry into the model!
var_sel &amp;lt;- bartMachine::var_selection_by_permute_cv(bm_All, num_trees_for_permute = 20)

# Look at the most important variables
var_sel$important_vars_cv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;BL_ID_Baden-Württemberg&amp;quot; &amp;quot;BL_ID_Bayern&amp;quot;           
##  [3] &amp;quot;BL_ID_Hessen&amp;quot;            &amp;quot;ff_pop&amp;quot;                 
##  [5] &amp;quot;hair_pp&amp;quot;                 &amp;quot;thea_pp&amp;quot;                
##  [7] &amp;quot;NUTS2_Fact_11&amp;quot;           &amp;quot;NUTS2_Fact_27&amp;quot;          
##  [9] &amp;quot;NUTS2_Fact_40&amp;quot;           &amp;quot;NUTS2_Fact_71&amp;quot;          
## [11] &amp;quot;S_170&amp;quot;                   &amp;quot;play_dn&amp;quot;                
## [13] &amp;quot;bir_km2&amp;quot;                 &amp;quot;cc_pop&amp;quot;                 
## [15] &amp;quot;sch_den&amp;quot;                 &amp;quot;kid_den&amp;quot;                
## [17] &amp;quot;Rch_den&amp;quot;                 &amp;quot;S_109_2&amp;quot;                
## [19] &amp;quot;EWZ&amp;quot;                     &amp;quot;Pop_Den&amp;quot;                
## [21] &amp;quot;S_004&amp;quot;                   &amp;quot;S_006&amp;quot;                  
## [23] &amp;quot;S_020&amp;quot;                   &amp;quot;S_051&amp;quot;                  
## [25] &amp;quot;S_054&amp;quot;                   &amp;quot;S_066&amp;quot;                  
## [27] &amp;quot;S_070&amp;quot;                   &amp;quot;S_080&amp;quot;                  
## [29] &amp;quot;S_104&amp;quot;                   &amp;quot;S_107&amp;quot;                  
## [31] &amp;quot;S_115&amp;quot;                   &amp;quot;S_123&amp;quot;                  
## [33] &amp;quot;S_130&amp;quot;                   &amp;quot;S_146&amp;quot;                  
## [35] &amp;quot;S_153&amp;quot;                   &amp;quot;X&amp;quot;                      
## [37] &amp;quot;Y&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below I have categorized the important variables, that will be used for the second BART model. Also I have removed the &lt;em&gt;NUTS2_Fact&lt;/em&gt; and &lt;em&gt;BL_ID&lt;/em&gt; variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_subset &amp;lt;- data_bm %&amp;gt;%
  select(c(
    # Geographical Units
    X, #Longitude
    Y, #Latitude
    
    # Political units
    S_109, #Rural/Urban
    
    # Socioeconomic
    EWZ, #Population
    Pop_Den, #Population density
    S_004, #Unemployment rate under 25
    S_006, #Household income per capita 
    S_020, #Employment rate 15-&amp;lt;30
    S_051, #Voter participation
    S_054, #Apprenticeship positions
    S_066, #Household income
    S_070, #Deptors rate
    S_080, #Recreationl Space
    S_104, #Income tax
    S_107, #Steuerkraft
    S_115, #Regional population potential
    S_123, #Child poverty
    S_130, #IC train station access
    S_146, #Commuters &amp;gt;150km
    S_153, #Foreign guests in tourist establishments
    S_170, #Longterm unemployment rate
    
    # Built environment
    Rch_den, #Church density
    play_dn, #Playground density
    bir_km2, #Biergarten per km²
    ff_pop, #Fast food places per capita
    hair_pp, #Hairdresser per capita
    thea_pp, #Theatre per capita
    cc_pop, #Community centre density
    sch_den, #School density
    kid_den #Kindergarten density
  ))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;second-bart-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Second BART model&lt;/h2&gt;
&lt;p&gt;With the subset of important predictors, we will build a second BART model. Again, I have already computed the optimal hyperparameters using the &lt;code&gt;bartMachineCV&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bm_final &amp;lt;- bartMachine(X = data_subset, y = y, 
                        k=3, nu=3, q=0.99, num_trees=225,
                        seed = 1234, verbose = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in build_bart_machine(X, y, Xy, num_trees, num_burn_in, num_iterations_after_burn_in, : Setting the seed when using parallelization does not result in deterministic output.
## If you need deterministic output, you must run &amp;quot;set_bart_machine_num_cores(1)&amp;quot; and then build the BART model with the set seed.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(bm_final)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## bartMachine v1.2.6 for regression
## 
## training data n = 401 and p = 31 
## built in 5 secs on 20 cores, 225 trees, 250 burn-in and 1000 post. samples
## 
## sigsq est for y beforehand: 0.185 
## avg sigsq estimate after burn-in: 0.12811 
## 
## in-sample statistics:
##  L1 = 89.74 
##  L2 = 34.06 
##  rmse = 0.29 
##  Pseudo-Rsq = 0.824
## p-val for shapiro-wilk test of normality of residuals: 0.00122 
## p-val for zero-mean noise: 0.94939&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compared to the first BART model, the second one saw a reduction in Pseudo-R² from 0.93 to 0.82, equating to a 12% reduction in explained variability. The RMSE increased from 0.18 to 0.29, indicating that the final model predicted age-adjusted incidence rates of COVID-19 for German counties with an accuracy of +/− 1.3 cases per 100,000. Again we need to check error assumptions and fitted vs. actual values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;check_bart_error_assumptions(bm_final)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;errorAssumption2.png&#34; /&gt; The new model is expected to perform worse compared to the first model, but the Q-Q and Fitted vs. Residuals plots both look good. Again, the BART model struggles with extreme (high) values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_y_vs_yhat(bm_final, credible_intervals = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;yVSyhat2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The “Fitted vs. Actual Values” plot above indicates overall OK model performance. This time however, a larger amount of values are outside of the confidence interval. We will also map the residuals, to test for spatial clustering.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;spatial-autocorrelation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Spatial autocorrelation&lt;/h2&gt;
&lt;p&gt;Spatial autocorrelation can be tested by mapping the residuals. I have provided a cleaned shapefile of the NUTS3 (federal states) regions in Germany. The mapped residuals allow us to visualize under- and overpredictions and check for spatial clustering of residuals. From this map I could not detect a discernible pattern of clustering - the residuals are randomly distributed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)
library(RColorBrewer)
library(tmap)

# Download shapefile
shp &amp;lt;- read_sf(&amp;quot;https://github.com/STBrinkmann/data/raw/main/RKI_sf.gpkg&amp;quot;)

# Sort shapefile, that it has the same order as the data_subset
shp &amp;lt;- shp[order(match(shp$EWZ, data_subset$EWZ)),]

# Join residuals to shapefile, then map residuals
shp$resid &amp;lt;- bm_final$residuals
tm_shape(shp) + 
  tm_polygons(col=&amp;quot;resid&amp;quot;, 
              title=&amp;quot;BART Machine Residuals\n(log incidence rate)&amp;quot;, 
              breaks=seq(-1.75, 1.75, 0.5), midpoint=NA, palette=&amp;quot;RdBu&amp;quot;) + 
  tm_layout(frame = FALSE,
            inner.margins=c(0.02, 0.02, 0.02, 0.20),
            legend.position = c(0.7, 0.22),
            legend.frame = TRUE,
            legend.outside = FALSE, 
            bg.color = &amp;quot;white&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/index.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To determine whether the spatial autocorrelation of residuals is statistically significant or not, one could compute Moran’s I. I will not explain Moran’s I in this post, but I would highly recommend these posts: &lt;a href=&#34;https://mgimond.github.io/Spatial/spatial-autocorrelation-in-r.html#app8_3&#34;&gt;Intro to GIS and Spatial Analysis&lt;/a&gt; and &lt;a href=&#34;https://rpubs.com/quarcs-lab/spatial-autocorrelation&#34;&gt;Spatial autocorrelation analysis in R&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(spdep)
# Define neighboring polygons
nb &amp;lt;- poly2nb(shp, queen=TRUE)

# Assign weights to each neighboring polygon
lw &amp;lt;- nb2listw(nb, style=&amp;quot;B&amp;quot;, zero.policy=TRUE)

# Compute Moran&amp;#39;s I statistic using a Monte-Carlo simulation 
MC &amp;lt;- moran.mc(shp$resid, lw, nsim=99)
MC&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Monte-Carlo simulation of Moran I
## 
## data:  shp$resid 
## weights: lw  
## number of simulations + 1: 100 
## 
## statistic = 0.059486, observed rank = 99, p-value = 0.01
## alternative hypothesis: greater&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Moran’s I score is between -1 and 1, where high (low) values determine positive (negative) spatial autocorrelation and 0 identifies the data is randomly distributed. The Morans’s I statistic of 0.06 (p=0.01) further confirms, that there is no spatial autocorrelation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;partial-dependence-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Partial Dependence Plots&lt;/h2&gt;
&lt;p&gt;In the previous steps we have build a robust BART machine to predict age-adjusted incidence rates of COVID-19 for German counties. However, as already mentioned in the beginning, I am interested in using BART as a exploratory tool. The high R² indicates, that the model did understand the non-linear relationships of the covariates with the COVID-19 incidence rate. To visualize and explore these relationships, Partial Dependence Plots (PDPs) are a great tool. PDPs are graphical outputs that illustrate the marginal effect of each independent variable on the response variable &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-friedman2002&#34; role=&#34;doc-biblioref&#34;&gt;Friedman 2002&lt;/a&gt;; &lt;a href=&#34;#ref-scarpone2017&#34; role=&#34;doc-biblioref&#34;&gt;Scarpone et al. 2017&lt;/a&gt;, &lt;a href=&#34;#ref-scarpone2020&#34; role=&#34;doc-biblioref&#34;&gt;2020&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The R package &lt;a href=&#34;https://cran.r-project.org/web/packages/pdp/index.html&#34;&gt;pdp&lt;/a&gt; provides great tools for computing partial dependence. However it does not support &lt;code&gt;bartMachine&lt;/code&gt;. But that’s no problem, as &lt;code&gt;bartMachine&lt;/code&gt; also comes with a build in function to generate PDPs. The function in the &lt;code&gt;bartMachine&lt;/code&gt; package is called &lt;code&gt;pd_plot&lt;/code&gt;. I will demonstrate a PDP and it’s corresponding histogram on the example of &lt;em&gt;S_115&lt;/em&gt; (Regional Population Potential). The values of &lt;em&gt;S_115&lt;/em&gt; are plotted on the x-axis and its marginal effect in incidence rate (log-adjusted) on the y-axis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Set parameters to plot PDP top and histogram bottom
par(mfrow = c(2,1))

pd_plot(bm_final, &amp;quot;S_115&amp;quot;, levs = c(0.0, seq(0, 1, 0.1), 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ...........&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(bm_final$X$S_115, 20, 
     main = &amp;quot;Histogram of the Regional Population Potential&amp;quot;,
     xlab = &amp;quot;Regional Population Potential&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/bart-a-bayesian-machine-learning-workflow-for-complex-spatial-data/index.en_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The regional population potential measures the likelihood of direct interactions to occur between inhabitants. The PDP indicates small marginal changes in incidence rates for low values of regional population potential, which can be interpreted as evidence that in counties with a lower probability of human interaction, there is a lower probability of viral contagion. The greatest increase in partial dependence is observed between the 20th and 80th percentiles of regional population potential index scores (14,016 to 47,067), indicating a strong non-linear effect of this variable on incidence rates.&lt;/p&gt;
&lt;p&gt;To improve visual interpretability in the plot above it would make sense to log-transform the data. However, this is not possible using the build in &lt;code&gt;pd_plot&lt;/code&gt; function. Therefore I have slightly rewritten this function to generate a ggplot output instead of a simple base R plot (I have provided the edited function on &lt;a href=&#34;https://github.com/CHEST-Lab/BART_Covid-19/blob/master/pdPlotGG.R&#34;&gt;GitHub&lt;/a&gt;). Now we can treat the result as an ggplot2 object, scale the axis, adjust the theme, combine the histogram and PDP in one plot,…&lt;/p&gt;
&lt;p&gt;Below, I have included the PDPs from our paper, visualizing the partial dependence of the 10 most prevalent variables. The variable importance can be computed using the &lt;code&gt;investigate_var_importance&lt;/code&gt; function. Based on the spatial exploratory data analysis, we have separated Germany into a low rate region (LLR) and high rate region (HHR). You can read the description and interpretation of the PDPs &lt;a href=&#34;https://ij-healthgeographics.biomedcentral.com/articles/10.1186/s12942-020-00225-1#Sec18&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ij-healthgeographics.biomedcentral.com/articles/10.1186/s12942-020-00225-1/figures/6&#34;&gt;&lt;img src=&#34;WallOfShame.svg&#34; alt=&#34;Partial Dependence Plots (PDP) of the 10 most prevalent variables in the final Bayesian Additive Regression Tree (BART) model. Histograms are shown for the entire country (green), for only the low rates region (LRR, teal), and for only the high rates region (HRR, purple). The PDPs indicate marginal changes in the predicted (log-transformed, age-adjusted) incidence rate per 100,000 residents (upper y-axis) for different values of each independent variable (x-axis)&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post I have demonstrated that BART is a powerful machine learning tool for modelling high-dimensional, non-linear data. The BART modelling demonstrated that although many variables can be used as inputs, the majority of variability explained will largely be determined from a small subset of all variables. Opening these black-box models and exploring and interpreting the results is easy and intuitive, by computing PDPs. The PDPs help us to understand the non-linear relationships between the covariates and the response variable.&lt;/p&gt;
&lt;p&gt;In future posts I will further explore the effectiveness of the variable selection function and demonstrate out-of-sample validation to test for overfitting.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-bleich2014&#34; class=&#34;csl-entry&#34;&gt;
Bleich, Justin, Adam Kapelner, Edward I. George, and Shane T. Jensen. 2014. &lt;span&gt;“Variable Selection for BART: An Application to Gene Regulation.”&lt;/span&gt; &lt;em&gt;The Annals of Applied Statistics&lt;/em&gt; 8 (3). &lt;a href=&#34;https://doi.org/10.1214/14-aoas755&#34;&gt;https://doi.org/10.1214/14-aoas755&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-breiman2001&#34; class=&#34;csl-entry&#34;&gt;
Breiman, Leo. 2001. &lt;span&gt;“Statistical Modeling: The Two Cultures (with Comments and a Rejoinder by the Author).”&lt;/span&gt; &lt;em&gt;Statistical Science&lt;/em&gt; 16 (3). &lt;a href=&#34;https://doi.org/10.1214/ss/1009213726&#34;&gt;https://doi.org/10.1214/ss/1009213726&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-Chipman2010&#34; class=&#34;csl-entry&#34;&gt;
Chipman, Hugh A., Edward I. George, and Robert E. McCulloch. 2010. &lt;span&gt;“&lt;span class=&#34;nocase&#34;&gt;BART: Bayesian additive regressiontrees&lt;/span&gt;.”&lt;/span&gt; &lt;em&gt;The Annals of Applied Statistics&lt;/em&gt; 4 (1): 266–98. &lt;a href=&#34;https://doi.org/10.1214/09-AOAS285&#34;&gt;https://doi.org/10.1214/09-AOAS285&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-friedman2002&#34; class=&#34;csl-entry&#34;&gt;
Friedman, Jerome H. 2002. &lt;span&gt;“Stochastic Gradient Boosting.”&lt;/span&gt; &lt;em&gt;Computational Statistics &amp;amp; Data Analysis&lt;/em&gt; 38 (4): 367–78. &lt;a href=&#34;https://doi.org/10.1016/s0167-9473(01)00065-2&#34;&gt;https://doi.org/10.1016/s0167-9473(01)00065-2&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-kapelner2016&#34; class=&#34;csl-entry&#34;&gt;
Kapelner, Adam, and Justin Bleich. 2016. &lt;span&gt;“bartMachine: Machine Learning with Bayesian Additive Regression Trees.”&lt;/span&gt; &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 70 (4). &lt;a href=&#34;https://doi.org/10.18637/jss.v070.i04&#34;&gt;https://doi.org/10.18637/jss.v070.i04&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-scarpone2020&#34; class=&#34;csl-entry&#34;&gt;
Scarpone, Christopher, Sebastian T. Brinkmann, Tim Große, Daniel Sonnenwald, Martin Fuchs, and Blake Byron Walker. 2020. &lt;span&gt;“A Multimethod Approach for County-Scale Geospatial Analysis of Emerging Infectious Diseases: A Cross-Sectional Case Study of COVID-19 Incidence in Germany.”&lt;/span&gt; &lt;em&gt;International Journal of Health Geographics&lt;/em&gt; 19 (1). &lt;a href=&#34;https://doi.org/10.1186/s12942-020-00225-1&#34;&gt;https://doi.org/10.1186/s12942-020-00225-1&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;ref-scarpone2017&#34; class=&#34;csl-entry&#34;&gt;
Scarpone, Christopher, Margaret G. Schmidt, Chuck E. Bulmer, and Anders Knudby. 2017. &lt;span&gt;“Semi-Automated Classification of Exposed Bedrock Cover in British Columbia’s Southern Mountains Using a Random Forest Approach.”&lt;/span&gt; &lt;em&gt;Geomorphology&lt;/em&gt; 285 (May): 214–24. &lt;a href=&#34;https://doi.org/10.1016/j.geomorph.2017.02.013&#34;&gt;https://doi.org/10.1016/j.geomorph.2017.02.013&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visible Greenness Exposure</title>
      <link>/post/visible-greenness-exposure/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      <guid>/post/visible-greenness-exposure/</guid>
      <description>
&lt;script src=&#34;/post/visible-greenness-exposure/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/post/visible-greenness-exposure/index.en_files/anchor-sections/anchor-sections.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/post/visible-greenness-exposure/index.en_files/anchor-sections/anchor-sections.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/post/visible-greenness-exposure/index.en_files/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/post/visible-greenness-exposure/index.en_files/lightable/lightable.css&#34; rel=&#34;stylesheet&#34; /&gt;


&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;
&lt;p&gt;Exposure to residential greenness or green spaces such as parks or gardens are beneficial for multiple measures of health &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-markevych2017&#34; role=&#34;doc-biblioref&#34;&gt;Markevych et al. 2017&lt;/a&gt;; &lt;a href=&#34;#section-ref-labib2020&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Lindley, and Huck 2020&lt;/a&gt;)&lt;/span&gt;. Greenness and greenspace will be used as synonyms henceforth. Greenspace exposure can be categorized into three types: (a) availability, referring to the physical amount of greenspace, (b) accessibility, meaning the spatial proximity to greenspace, and (c) visibility, referring to the visual perception of greenness &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-labib2020&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Lindley, and Huck 2020&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://www.geography.nat.fau.eu/research/cultural-geography/wg-digital-health/#collapse_5&#34;&gt;our&lt;/a&gt; recent publication (in submission) we measured greenness taking a top-down, bird’s eye view approach using remote sensing derived &lt;a href=&#34;https://eos.com/ndvi/&#34;&gt;NDVI&lt;/a&gt;, to approximate the availability of greenness. Furthermore, we used a distance weighted road network to calculate potential neighborhood exposure models around participants place of residency, therefore also accounting for accessibility.&lt;/p&gt;
&lt;p&gt;The next step will be, to combine greenness visibility with our potential neighborhood exposure models.&lt;/p&gt;
&lt;p&gt;In this post, I will therefore demonstrate how to download and prepare all necessary files and methods needed for a visibility analysis. In the first part I demonstrate data acquisition and processing, in the second part I will explain the main functions used for the visibility analysis. My implementation of these methods is very light weighted and fast, while still maintaining high resolution. The functions presented in this post for computing a viewshed based Green Visibility Index (GVI), have also been included in the &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GVI&lt;/a&gt; R package.&lt;/p&gt;
&lt;div id=&#34;section-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;First load all packages. If one of these packages has not been installed, use the &lt;code&gt;install.packages()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=terra&#34;&gt;terra&lt;/a&gt; is a relatively new R package that replaces the well known &lt;a href=&#34;https://CRAN.R-project.org/package=raster&#34;&gt;raster&lt;/a&gt;. I have found &lt;code&gt;terra&lt;/code&gt; to work much faster for most tasks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(sf)
library(ggplot2)
library(ggthemes)
library(terra)
library(lidR)
library(future)
library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;The data is being stored in a different directory than this R project. Therefore I first need to assign my working directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workdir &amp;lt;- &amp;quot;/media/sebastian/Red/Vancouver&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;section-dtm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;DTM&lt;/h3&gt;
&lt;p&gt;First, we need to download the digital terrain model (DTM) generated from LiDAR data collected in 2013 for the City of Vancouver from the &lt;a href=&#34;https://opendata.vancouver.ca/pages/home/&#34;&gt;City of Vancouver Open Data Portal&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Download DTM as .zip
download.file(&amp;quot;https://webtransfer.vancouver.ca/opendata/TIF/DEM_2013_TIF.zip&amp;quot;,
              destfile = file.path(workdir, &amp;quot;dtm.zip&amp;quot;))

# Unzip
unzip(zipfile = file.path(workdir, &amp;quot;dtm.zip&amp;quot;), exdir = &amp;quot;Data&amp;quot;) 

# Delete .zip 
unlink(file.path(workdir, &amp;quot;dtm.zip&amp;quot;), recursive = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DTM &amp;lt;- terra::rast(file.path(workdir, &amp;quot;DEM/DEM_2013.tif&amp;quot;))

plot(DTM)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-lidar&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;LiDAR&lt;/h3&gt;
&lt;p&gt;Next, we will load the shapefile for the LiDAR 2013 tiles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lidar tiles
lidar_tiles &amp;lt;- read_sf(&amp;quot;https://opendata.vancouver.ca/explore/dataset/lidar-2013/download/?format=geojson&amp;quot;) %&amp;gt;% 
  st_transform(crs(DTM)) %&amp;gt;% 
  dplyr::select(name, lidar_url)

lidar_tiles %&amp;gt;% 
  ggplot() +
  geom_sf() + 
  theme_map()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Each tile of this shapefile contains the tile name and a link, to download the LiDAR data. The total file size of all 168 LiDAR scenes is ~90GB. We will store them in a temporary file and calculate a DSM from the data later. I would highly recommend using parallel computation for this and to do something else while the data is being downloaded.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lidar_download &amp;lt;- function(x, tmp_dir) {
  # Download GeoTIFF as .zip
  download.file(x$lidar_url, destfile = paste0(file.path(tmp_dir, x$name), &amp;quot;.zip&amp;quot;))
  
  # Unzip
  unzip(zipfile = paste0(file.path(tmp_dir, x$name), &amp;quot;.zip&amp;quot;), 
        exdir = file.path(tmp_dir))
  
  # Delete .zip 
  unlink(paste0(file.path(tmp_dir, x$name), &amp;quot;.zip&amp;quot;), recursive = TRUE)
}

# Set number of  cores and path to tmp_dir
cores &amp;lt;- 22
tmp_dir &amp;lt;- file.path(workdir, &amp;quot;Temp&amp;quot;)

if (!dir.exists(tmp_dir)) {
  dir.create(tmp_dir)
}

# Run function
if (cores &amp;gt; 1) {
  if (Sys.info()[[&amp;quot;sysname&amp;quot;]] == &amp;quot;Windows&amp;quot;) {
    cl &amp;lt;- parallel::makeCluster(cores)
    parallel::parApply(cl, lidar_tiles, 1, FUN = lidar_download, 
                                    tmp_dir = tmp_dir)
    parallel::stopCluster(cl)
  }
  else {
    split(lidar_tiles, seq(nrow(lidar_tiles))) %&amp;gt;% 
      parallel::mclapply(FUN = lidar_download, tmp_dir = tmp_dir, 
                         mc.cores = cores, mc.preschedule = TRUE)
  }
} else {
  apply(lidar_tiles, 1, FUN = lidar_download, 
         tmp_dir = tmp_dir)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One LiDAR tile has almost no land points and the algorithm can’t process it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;bad_LAS.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Therefore, we need to remove it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;file.remove(file.path(tmp_dir, &amp;quot;CoV_4850E_54510N.las&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can load all LiDAR files with the &lt;code&gt;lidR&lt;/code&gt; package &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-roussel2020&#34; role=&#34;doc-biblioref&#34;&gt;Roussel et al. 2020&lt;/a&gt;)&lt;/span&gt; and calculate the DSM using the pit-free &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-khosravipour2014&#34; role=&#34;doc-biblioref&#34;&gt;Khosravipour et al. 2014&lt;/a&gt;)&lt;/span&gt; algorithm.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lidar_catalog &amp;lt;- lidR::readLAScatalog(tmp_dir)
crs(lidar_catalog) &amp;lt;- terra::crs(DTM)
opt_independent_files(lidar_catalog) &amp;lt;- TRUE

# Use future to calculate DSM
# Adjust number of cores with the workers parameter. This process is very RAM heavy!
plan(multisession, gc = TRUE, workers = 10)

# I would recommend to run this code from the console, to visualize the progress.
lidar_dsm &amp;lt;- grid_canopy(lidar_catalog, res = 0.5, 
                         pitfree(thresholds = c(0, 2, 5, 10, 15, 20), max_edge = c(0, 1.5)))

# Save raster and remove variables
lidar_dsm %&amp;gt;% 
  terra::rast() %&amp;gt;% 
  terra::writeRaster(filename = file.path(workdir, &amp;quot;DSM/dsm.tif&amp;quot;), format=&amp;quot;GTIFF&amp;quot;)
rm(lidar_catalog, lidar_dsm)

# Load DSM
dsm &amp;lt;- terra::rast(file.path(workdir, &amp;quot;DSM/dsm.tif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look on the DSM. We will be using the &lt;a href=&#34;https://CRAN.R-project.org/package=rayshader&#34;&gt;rayshader&lt;/a&gt; package to generate a 2D map.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dsm_clip &amp;lt;- rast(xmin = 487200, xmax = 487800, 
                 ymin = 5455800, ymax = 5456400,
                 crs = crs(dsm), res = 0.5)

# Crop DSM and convert to matrix
elev_matrix &amp;lt;- dsm %&amp;gt;% 
  crop(dsm_clip) %&amp;gt;% 
  matrix(
    as.vector(terra::values(.)),
    nrow = ncol(.), ncol = nrow(.)
  ) %&amp;gt;% 
  t()

library(rayshader)
options(&amp;quot;cores&amp;quot; = 16)

# Calculate rayshader layers
ambmat &amp;lt;- ambient_shade(elev_matrix, multicore = TRUE)
raymat &amp;lt;- ray_shade(elev_matrix, lambert = TRUE, multicore = TRUE)


# Plot 2D
elev_matrix %&amp;gt;%
  sphere_shade(texture = &amp;quot;unicorn&amp;quot;) %&amp;gt;%
  add_shadow(raymat, max_darken = 0.5) %&amp;gt;%
  add_shadow(ambmat, max_darken = 0.1) %&amp;gt;%
  plot_map()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some missing values in the raster and at the right edge of the map we can see a “wall.” This is due to the fact, that power lines are being measured by LiDAR, too. Therefore we need to post-process the DSM to smooth the raster and fill empty pixels. We will apply a moving window approach. However, the DSM is too large, to apply &lt;code&gt;focal&lt;/code&gt; on the whole raster at once. Therefore we will use the &lt;code&gt;lidar_tiles&lt;/code&gt; shapefile from above, to apply smoothing and NA-value filling on subsets of the raster. To avoid edge effects, we first crop the DSM to a buffered LiDAR tile, apply the &lt;code&gt;focal&lt;/code&gt; and finally crop the processed DSM to the unbuffered LiDAR tile.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Check if processing directory exists.
delete_folder &amp;lt;- FALSE
proc_dir &amp;lt;- file.path(workdir, &amp;quot;DSM/Proc&amp;quot;)

if(!dir.exists(proc_dir)) {
  delete_folder &amp;lt;- TRUE
  dir.create(proc_dir)
}

pb = txtProgressBar(min = 0, max = nrow(lidar_tiles), initial = 0, style = 3)
for (i in 1:nrow(lidar_tiles)) {
  dsm %&amp;gt;% 
    # Crop to buffered tile
    terra::crop(sf::st_buffer(lidar_tiles[i,], 10)) %&amp;gt;% 
    # Fill NA values
    terra::focal(3, fun = median, na.only = T) %&amp;gt;%
    # Smoothing
    terra::focal(9, fun = median, na.rm = TRUE) %&amp;gt;%
    # Crop to unbuffered tile
    terra::crop(lidar_tiles[i,]) %&amp;gt;% 
    terra::writeRaster(filename = file.path(proc_dir, 
                                            paste0(&amp;quot;dsm_tile_&amp;quot;, i, &amp;quot;.tif&amp;quot;)),
                       format=&amp;quot;GTIFF&amp;quot;)
  
  setTxtProgressBar(pb, i)
}

# Merge raster tiles
filled_dsm &amp;lt;- dir(proc_dir, pattern = &amp;quot;dsm_tile_&amp;quot;, full.names = T) %&amp;gt;% 
    lapply(rast) %&amp;gt;% 
    do.call(terra::merge, .)

# Delete temp files
if (delete_folder) {
  unlink(proc_dir, recursive = TRUE)
} else {
 unlink(dir(proc_dir, pattern = &amp;quot;dsm_tile_&amp;quot;, full.names = T)) 
}

terra::writeRaster(filled_dsm, format=&amp;quot;GTIFF&amp;quot;,
                   filename = file.path(workdir, &amp;quot;DSM/dsm_filled.tif&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s look at the post-processed raster.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Crop DSM and convert to matrix
elev_matrix &amp;lt;- filled_dsm %&amp;gt;% 
  crop(dsm_clip) %&amp;gt;% 
  matrix(
    as.vector(terra::values(.)),
    nrow = ncol(.), ncol = nrow(.)
  ) %&amp;gt;% 
  t()

# Calculate rayshader layers
ambmat &amp;lt;- ambient_shade(elev_matrix, multicore = TRUE)
raymat &amp;lt;- ray_shade(elev_matrix, lambert = TRUE, multicore = TRUE)


# Plot 2D
elev_matrix %&amp;gt;%
  sphere_shade(texture = &amp;quot;unicorn&amp;quot;) %&amp;gt;%
  add_shadow(raymat, max_darken = 0.5) %&amp;gt;%
  add_shadow(ambmat, max_darken = 0.1) %&amp;gt;%
  plot_map()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The DSM is a lot smoother than before. I have tested multiple different parameters for the smoothing-step and w=9 returned the best looking results. In the future I may apply the smoothing-step only on raster cells covered by power lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-visibility-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visibility Analysis&lt;/h2&gt;
&lt;p&gt;Greenspace is associated with several health benefits along multiple pathways &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-markevych2017&#34; role=&#34;doc-biblioref&#34;&gt;Markevych et al. 2017&lt;/a&gt;; &lt;a href=&#34;#section-ref-dzhambov2020&#34; role=&#34;doc-biblioref&#34;&gt;Dzhambov et al. 2020&lt;/a&gt;; &lt;a href=&#34;#section-ref-labib2020&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Lindley, and Huck 2020&lt;/a&gt;)&lt;/span&gt;. In a recent study (in submission), we analyze health benefits based on the availability and accessibility of greenspace, using a top-down, bird’s eye view, approach. Visibility describes a third type of exposure assessment and refers to the amount of greenspace that can be seen from a given point &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-labib2020&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Lindley, and Huck 2020&lt;/a&gt;)&lt;/span&gt;. Recent studies have adopted viewshed-based visibility analysis &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-chamberlain2013&#34; role=&#34;doc-biblioref&#34;&gt;Chamberlain and Meitner 2013&lt;/a&gt;; &lt;a href=&#34;#section-ref-tabrizian2020&#34; role=&#34;doc-biblioref&#34;&gt;Tabrizian et al. 2020&lt;/a&gt;; &lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Huck, and Lindley 2021&lt;/a&gt;)&lt;/span&gt;, however there still is a limited use of visibility exposure assessment in current studies &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-labib2020&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Lindley, and Huck 2020&lt;/a&gt;)&lt;/span&gt;. The following code is primarily based on the methods described by &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Huck, and Lindley&lt;/a&gt; (&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;2021&lt;/a&gt;)&lt;/span&gt; and their Python code of the &lt;a href=&#34;https://github.com/jonnyhuck/green-visibility-index/blob/master/gvi.py&#34;&gt;Green Visibility Index&lt;/a&gt;, and the overall process is illustrated in the figure below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://doi.org/10.1016/j.scitotenv.2020.143050&#34;&gt;&lt;img src=&#34;gvi.jpg&#34; style=&#34;width:7.13in&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;em&gt;Conceptual design of greenspace visibility modelling &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Huck, and Lindley 2021&lt;/a&gt;)&lt;/span&gt;.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;The line of sight is being calculated from the observer to every point in the area of interest, to distinguish between visible and invisible points. To determine green and no-green points, a greenspace mask will be intersected.
To make the code presented in this post easier to understand, it has not been fully optimized. I have created the R package &lt;a href=&#34;https://github.com/STBrinkmann/GVI&#34;&gt;GVI&lt;/a&gt;, where I implemented the same functions with optimized data structures and heavy use of C++ code.&lt;/p&gt;
&lt;div id=&#34;section-rasterprofile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rasterprofile&lt;/h3&gt;
&lt;p&gt;To calculate the visibility of a point B from point A, we first need to access all raster cells from point A to B. The &lt;code&gt;rasterprofile&lt;/code&gt; function returns a &lt;code&gt;matrix&lt;/code&gt; with all cells from A to B, containing X- and Y-coordinates, the height and the cell-number for every cell. Surprisingly the &lt;code&gt;raster::extract&lt;/code&gt; is faster than &lt;code&gt;terra::extract&lt;/code&gt; when using a matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rasterprofile &amp;lt;- function(r, x0, y0, x1, y1, resolution){
  # Sample a raster along a straight line between two points
  # Try to match the sampling size to the raster resolution
  dx = sqrt((x0 - x1)^2 + (y0 - y1)^2)
  nsteps = 1 + round(dx / resolution)
  pointsZ &amp;lt;- cbind(x0 + (0:nsteps) * (x1 - x0) / nsteps, 
                   y0 + (0:nsteps) * (y1 - y0) / nsteps)
  
  rasterVals &amp;lt;- raster::extract(x = r, y = pointsZ, cellnumber = TRUE)
  
  pointsZ &amp;lt;- cbind(pointsZ, rasterVals[,2], rasterVals[,1])
  
  if (anyNA(pointsZ)) {
    pointsZ &amp;lt;- pointsZ[stats::complete.cases(pointsZ),,drop = FALSE]
  }
  return(pointsZ)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-line-of-sight&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Line of Sight&lt;/h3&gt;
&lt;p&gt;The observer at point A can only see point B, if no object in between point A and B blocks the view to point B. The &lt;code&gt;lineOfSight&lt;/code&gt; function evaluates visibility along all cells from A to B, by calculating tangent &lt;em&gt;⍺&lt;/em&gt; from &lt;em&gt;𝚫height&lt;/em&gt; (opposite side) and &lt;em&gt;distance traveled&lt;/em&gt; (adjacent side) and comparing it for every step. To see a point, its tangent &lt;em&gt;⍺&lt;/em&gt; must be greater than the biggest tangent &lt;em&gt;⍺&lt;/em&gt; so far.&lt;/p&gt;
&lt;p&gt;In R we would write a for loop and compare the tangent of the current point to the maximum tangent so far. Therefore this step can’t be vectorised, because the subsequent iterations depend on previous ones. Native R code is quiet “slow” for these kind of tasks. Therefore I have implemented this step in C++ using the &lt;a href=&#34;http://www.rcpp.org/&#34;&gt;Rcpp&lt;/a&gt; package.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;Rcpp.h&amp;gt;
using namespace Rcpp;

// [[Rcpp::export]]
NumericVector isVisibleC(NumericVector x) {
  int n = x.size();
  NumericVector out(n);
  out[0] = 1;
  
  double max_tangent = -9999;
  
  for(int i = 1; i &amp;lt; n; ++i) {
    double this_tangent = x[i];
    
    if (this_tangent &amp;gt; max_tangent) {
      max_tangent = this_tangent;
      out[i] = 1;
    } else {
      out[i] = -1;
    }
  }
  return out;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;lineOfSight&lt;/code&gt; function returns a &lt;code&gt;data.table&lt;/code&gt; containing the cell number and corresponding visibility of all points from A to B. Visible cells have a value of 1 and non visible cells -1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lineOfSight &amp;lt;- function(xy1, x0, y0, height0, resolution, dsm_data) {
  # Get start XY from input
  x1 &amp;lt;- xy1[1]
  y1 &amp;lt;- xy1[2]
  
  # Get the pixels in the line
  pixels &amp;lt;- rasterprofile(r = dsm_data, x0 = x0, y0 = y0, x1 = x1, y1 = y1, 
                          resolution = resolution)
  
  # Distance traveled so far
  distance_traveled = sqrt((y0 - pixels[,2])^2 + (x0 - pixels[,1])^2)
    
  # Calculate tangent from delta height (opposite side) and distance traveled (adjacent side)
  tangents &amp;lt;- (pixels[,3] - height0) / (distance_traveled * resolution)
  
  # Is visible? Current tangent must be greater than max. tangent
  visibility &amp;lt;- isVisibleC(tangents)
  
  # Return cellnumber and visibility-value
  data.table::as.data.table(cbind(pixels[,4], visibility))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-viewshed&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Viewshed&lt;/h3&gt;
&lt;p&gt;Finally, the visibility of all points withing a certain buffer around point A can be calculated, using the &lt;code&gt;lineOfSight&lt;/code&gt; function. The &lt;code&gt;viewshed&lt;/code&gt; function returns a circular raster (start point + max_distance-buffer) where values of 1 indicate visible points and -1 non-visible points. To calculate visibility for all points in the raster, we only need to calculate the line of sight from the center to all boundary points of the circle and store the information of each point in between.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;viewshed &amp;lt;- function(sf_start, max_distance, dsm_data, dtm_data, resolution, 
                     observer_height, cores = 1, plot = FALSE) {
  
  # AOI
  this_aoi &amp;lt;- sf_start %&amp;gt;% 
    sf::st_buffer(max_distance)
  
  # Coordinates of start point
  x0 &amp;lt;- sf::st_coordinates(sf_start)[1]
  y0 &amp;lt;- sf::st_coordinates(sf_start)[2]
  
  # Observer height
  height0 &amp;lt;- as.numeric(terra::extract(dtm_data, cbind(x0, y0))) + observer_height
  
  # If the resolution parameter differs from the input-DSM resolution,
  # resample the DSM to the lower resolution.
  # Also, convert dsm_data_masked to &amp;quot;Raster&amp;quot; object, for faster internal calculation.
  if ((res(dsm_data)[1] != resolution) &amp;amp; (resolution &amp;gt;= 1)) {
    dsm_data_masked &amp;lt;- terra::crop(dsm_data, this_aoi) %&amp;gt;% 
      terra::aggregate(fact = resolution/terra::res(.)) %&amp;gt;% 
      terra::mask(terra::vect(this_aoi))
    
    output &amp;lt;- terra::setValues(dsm_data_masked, 0) %&amp;gt;%
      terra::mask(dsm_data_masked)
    
    dsm_data_masked &amp;lt;- as(dsm_data_masked, &amp;quot;Raster&amp;quot;)
  } else {
    dsm_data_masked &amp;lt;- terra::crop(dsm_data, this_aoi) %&amp;gt;% 
      terra::mask(terra::vect(this_aoi))
    
    output &amp;lt;- terra::setValues(dsm_data_masked, 0) %&amp;gt;% 
      terra::mask(dsm_data_masked)
    
    dsm_data_masked &amp;lt;- as(dsm_data_masked, &amp;quot;Raster&amp;quot;)
  }
  
  
  # Calculate boundaries of output raster (boundaries are adjacent to NA values)
  output_boundaries &amp;lt;- terra::expand(output, resolution*2) %&amp;gt;% 
    terra::boundaries()
  
  # Get coordinates of boundaries cells and convert to list
  xy_stop &amp;lt;- terra::xyFromCell(output_boundaries, which(terra::values(output_boundaries) == 1)) %&amp;gt;% 
    split(seq(nrow(.)))
  
  # Apply lineOfSight function on every point in xy_stop
  if (cores &amp;gt; 1) {
    if (Sys.info()[[&amp;quot;sysname&amp;quot;]] == &amp;quot;Windows&amp;quot;) {
      cl &amp;lt;- parallel::makeCluster(cores)
      parallel::clusterExport(cl, &amp;quot;rasterprofile&amp;quot;)
      parallel::clusterEvalQ(cl, library(&amp;quot;dplyr&amp;quot;))
      this_LoS &amp;lt;- parallel::parLapply(cl, xy_stop, fun = lineOfSight, 
                                     x0 = x0, y0 = y0,
                                     height0 = height0, resolution = resolution, 
                                     dsm_data = dsm_data_masked)
      parallel::stopCluster(cl)
    }
    else {
      this_LoS &amp;lt;- parallel::mclapply(xy_stop, lineOfSight, 
                                     x0 = x0, y0 = y0,
                                     height0 = height0, resolution = resolution, 
                                     dsm_data = dsm_data_masked, 
                                     mc.cores = cores, mc.preschedule = TRUE)
    }
  } else {
    this_LoS &amp;lt;- lapply(xy_stop, FUN = lineOfSight, 
                       x0 = x0, y0 = y0,
                       height0 = height0, resolution = resolution, 
                       dsm_data = dsm_data_masked)
  }
  
  # Bind list
  this_LoS &amp;lt;- data.table::rbindlist(this_LoS)
  
  # Copy result of lapply to the output raster 
  output[this_LoS[[1]]] &amp;lt;- this_LoS[[2]]
  
  # Compare DSM with Visibilty
  if (plot) {
    par(mfrow=c(1,2))
    plot(dsm_data_masked); points(x0, y0, col = &amp;quot;red&amp;quot;, pch = 20, cex = 2)
    plot(output, legend = F); points(x0, y0, col = &amp;quot;red&amp;quot;, pch = 20, cex = 2)
    par(mfrow=c(1,1))
  }
  return(output)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The animation below illustrates, the functionality of the &lt;code&gt;viewshed&lt;/code&gt; function. Starting with a raster of unknown visibility (yellow), we iterative call the &lt;code&gt;lineOfSight&lt;/code&gt; function and set the status of each raster cell to visible (green) or no-visible (white).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;LoS.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-examples&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;We need to create a start point to compare the effect of different resolutions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Disable progress bar for terra::aggregate
terra::terraOptions(progress = 0)

sf_start &amp;lt;- sfheaders::sf_point(c(487616.2, 5455970)) %&amp;gt;% 
    st_sf(crs = st_crs(26910))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;section-resolution-0.5m&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1. Resolution = 0.5m&lt;/h4&gt;
&lt;p&gt;Output-Raster-Cells: 1 440 000&lt;br /&gt;
Runtime: 0.85 seconds (cores=1: 1.80 seconds)&lt;br /&gt;
Total visibility: 11.9%&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;viewshed_1 &amp;lt;- viewshed(sf_start = sf_start, max_distance = 300,
                       dsm_data = filled_dsm, dtm_data = DTM, 
                       resolution = 0.5, observer_height = 1.8, 
                       cores = 10, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-resolution-1m&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2. Resolution = 1m&lt;/h4&gt;
&lt;p&gt;Output-Raster-Cells: 360 000&lt;br /&gt;
Runtime: 0.45 seconds (cores=1: 0.75 seconds)&lt;br /&gt;
Total visibility: 12.4%&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;viewshed_2 &amp;lt;- viewshed(sf_start = sf_start, max_distance = 300,
                       dsm_data = filled_dsm, dtm_data = DTM, 
                       resolution = 1, observer_height = 1.8, 
                       cores = 10, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-resolution-2m&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3. Resolution = 2m&lt;/h4&gt;
&lt;p&gt;Output-Raster-Cells: 90 000&lt;br /&gt;
Runtime: 0.35 seconds (cores=1: 0.40 seconds)&lt;br /&gt;
Total visibility: 12.8%&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;viewshed_3 &amp;lt;- viewshed(sf_start = sf_start, max_distance = 300,
                       dsm_data = filled_dsm, dtm_data = DTM, 
                       resolution = 2, observer_height = 1.8, 
                       cores = 5, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-resolution-5m&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;4. Resolution = 5m&lt;/h4&gt;
&lt;p&gt;Output-Raster-Cells: 14 400&lt;br /&gt;
Runtime: 0.22 seconds (cores=1: 0.18 seconds)&lt;br /&gt;
Total visibility: 14.6%&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;viewshed_4 &amp;lt;- viewshed(sf_start = sf_start, max_distance = 300,
                       dsm_data = filled_dsm, dtm_data = DTM, 
                       resolution = 5, observer_height = 1.8, 
                       cores = 2, plot = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-network-visible-greenspace&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Network Visible Greenspace&lt;/h2&gt;
&lt;p&gt;One practical application of the viewshed algorithm is, to calculate the visible neighborhood greenness of an observer, by analyzing visible greenness along roads and paths in the neighborhood.&lt;/p&gt;
&lt;div id=&#34;section-greenspace-mask&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Greenspace Mask&lt;/h3&gt;
&lt;p&gt;To determine the level of greenness for the visible cells in a viewshed, we need to define green and no-green pixels. For this purpose we will be using the &lt;a href=&#34;http://www.metrovancouver.org/data/Data/LandCoverClassification-2m/LCC2014_2m_LiDAR_gdb.zip&#34;&gt;Vancouver Land Cover Classification 2014 - 2m LiDAR (Raster)&lt;/a&gt;. This data can be opened using ArcGIS and exported as TIFF for further analysis. From the documentation we can read the class values as follows:&lt;/p&gt;
&lt;table style=&#34;width:90%; font-family: &amp;quot;Arial Narrow&amp;quot;, &amp;quot;Source Sans Pro&amp;quot;, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;&#34; class=&#34; lightable-classic lightable-striped&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;font-weight: bold;&#34;&gt;
Value
&lt;/th&gt;
&lt;th style=&#34;text-align:center;font-weight: bold;&#34;&gt;
Level 1
&lt;/th&gt;
&lt;th style=&#34;text-align:center;font-weight: bold;&#34;&gt;
Level 2
&lt;/th&gt;
&lt;th style=&#34;text-align:center;font-weight: bold;&#34;&gt;
Level 3
&lt;/th&gt;
&lt;th style=&#34;text-align:left;font-weight: bold;&#34;&gt;
Criteria
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
1
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Built-up
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Buildings
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Identified using shape/size, shadow cast, height, relative canopy height, texture.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Paved
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Everything from sidewalks and alleys to highways.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
3
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Other Built
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Not concrete/asphalt built surfaces or building roofs. Sports surfaces (artificial turf and running tacks), possibly transit or rail areas, other impervious surfaces, etc.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
4
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Bare
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Barren
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Beaches, alpine rock, shoreline rock, etc. Lack of vegetation. Likely not soil (colour/context suggests no organic matter and/or imperviousness). Also quarries, gravel pits, dirt roads.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
5
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Soil
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Agricultural soils (could be light or dark), cleared/open areas where darker colours indicate organic matter present (as compared to, e.g. sand), potentially riverine/alluvial deposits.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
6
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Vegetation
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Tree canopy
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Coniferous
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Predominantly coniferous (&amp;gt;75%)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
7
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Deciduous
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Predominantly deciduous (&amp;gt;75%)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
8
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Shrub
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Woody, leafy, and generally rough-textured vegetation shorter than trees (approx. &amp;lt;3-4m), taller than grass.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
9
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Grass-herb
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Modified Grass-herb
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Crops, golf course greens, city park grass, lawns, etc.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
10
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Natural Grass-herb
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Alpine meadows, near-shore grass areas, bog/wetland areas.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
11
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Non-photosynthetic vegetation
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dead grass, drought stressed vegetation, could include log
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
12
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Water
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Lakes, rivers, inlets, irrigation channels, retention ponds, pools, etc.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
13
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Shadow
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Dark pixels with v/ low reflectance values. Image features not easily visible. Compare w/ RapidEye image for shadow
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
14
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
Clouds/Ice
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:center;&#34;&gt;
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Very bright pixels, that are not high-reflectance features from built-up areas.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For demonstration purpose I will use all vegetation classes as one criteria (green vs. no-green).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load LandCover
landCover &amp;lt;- rast(file.path(workdir, &amp;quot;LCC2014_2m_LiDAR1.tif&amp;quot;))

# Select Vegetation
greenspace &amp;lt;- landCover %in% c(6:10); invisible(gc())

# Plot to compare LandCover and vegetation mask
par(mfrow = c(1,2))
landCover %&amp;gt;% 
  crop(dsm_clip) %&amp;gt;% 
  plot(legend = FALSE)

points(st_coordinates(sf_start)[1], st_coordinates(sf_start)[2], 
       col = &amp;quot;blue&amp;quot;, cex = 3, pch = 20)

greenspace %&amp;gt;% 
  crop(dsm_clip) %&amp;gt;% 
  plot(legend = FALSE)

points(st_coordinates(sf_start)[1], st_coordinates(sf_start)[2], 
       col = &amp;quot;blue&amp;quot;, cex = 3, pch = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-green-visibility-index&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Green Visibility Index&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;gvi&lt;/code&gt; (Green Visibility Index; &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Huck, and Lindley 2021&lt;/a&gt;)&lt;/span&gt;) function returns the proportion of visible greenspace to total visibility. The values range between 0 and 1, where 0 = no green cells are visible, and 1 = all of the visible cells are green. Applying the &lt;code&gt;visibleGreen&lt;/code&gt; function on the &lt;code&gt;viewshed_1&lt;/code&gt; object calculated above returns 0.91, meaning that 91% of the visible area is vegetated.&lt;br /&gt;
In the original paper of &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;Labib, Huck, and Lindley&lt;/a&gt; (&lt;a href=&#34;#section-ref-labib2021&#34; role=&#34;doc-biblioref&#34;&gt;2021&lt;/a&gt;)&lt;/span&gt; the authors also applied a distance decay function, to account for the reducing visual prominence of an object in space with increasing distance from the observer. However, I will address this issue in another post about distance decay models.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gvi &amp;lt;- function(viewshed, greenspace) {
  # Get XY coordinates that are visible
  xy &amp;lt;- viewshed %&amp;gt;% 
    terra::xyFromCell(which(viewshed[] == 1))

  # Intersect XY with greenspace mask
  output &amp;lt;- greenspace[terra::cellFromXY(greenspace, xy)] %&amp;gt;% 
    unlist(use.names = FALSE)

  # Proportion of visible green
  return(sum(output == 1) / length(output))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-network-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Network Analysis&lt;/h3&gt;
&lt;p&gt;We will use the &lt;code&gt;DRIGLUCoSE&lt;/code&gt; R package from our recent publication to calculate a road network, and finally asses visible greenspace along the network. For a detailed explanation of the &lt;code&gt;DRIGLUCoSE&lt;/code&gt; package see the &lt;a href=&#34;https://github.com/STBrinkmann/DRIGLUCoSE&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Download and process road network from OSM data
aoi.osm &amp;lt;- DRIGLUCoSE::osm_roads(x = sf_start, dist = 10, speed = 75)

# Calculate isodistances
aoi.isodistances &amp;lt;- DRIGLUCoSE::isodistances(x = sf_start %&amp;gt;% mutate(tag = 1),
                                             tag = &amp;quot;tag&amp;quot;, road_network = aoi.osm, 
                                             speed = 75, 
                                             isochrones_seq = seq(1, 10, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the figure below the isodistances are being illustrated. The red point represents the starting point. We will calculate visible greenspace proportion every 10m.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-28-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To evaluate network visibility, we will write a new function &lt;code&gt;networkVisibleGreenspace&lt;/code&gt; to combine all previous steps to a single point along the network.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;networkVisibleGreenspace &amp;lt;- function(x, isodistance, greenspace,
                                     dsm_data, dtm_data, 
                                     resolution, max_distance, observer_height, 
                                     cores, plot = FALSE) {
  
  # 1. Calculate viewshed
  this_viewshed &amp;lt;- viewshed(sf_start = x, max_distance = max_distance,
                            dsm_data = dsm_data, dtm_data = dtm_data, 
                            resolution = resolution, 
                            observer_height = observer_height, 
                            cores = cores, plot = plot)
  
  # 2. Proportion of visible greenspace of total visibility (GVI)
  this_gvi &amp;lt;- gvi(viewshed = this_viewshed, greenspace = greenspace)
  
  # 3. Get time value of x from isodistance
  return(dplyr::tibble(time = isodistance[sf::st_nearest_feature(x, isodistance),]$time, 
                       GVI = this_gvi,
                       X = as.numeric(st_coordinates(x)[1]),
                       Y = as.numeric(st_coordinates(x)[2])))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the &lt;code&gt;st_line_sample&lt;/code&gt; function to sample points along the isodistance object. In the viewshed examples above we have seen, that for &lt;code&gt;resolution = 2&lt;/code&gt; the computation time hardly differs if we set &lt;code&gt;cores = 1&lt;/code&gt;. Therefore I use &lt;code&gt;cores = 1&lt;/code&gt; in the &lt;code&gt;networkVisibleGreenspace&lt;/code&gt; and call it from the &lt;code&gt;mclapply&lt;/code&gt; with parallel processing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Sample points on the isodistance for every 25m 
all_points &amp;lt;- aoi.isodistances %&amp;gt;% 
  sf::st_union() %&amp;gt;% 
  sf::st_cast(&amp;quot;LINESTRING&amp;quot;) %&amp;gt;% 
  sf::st_line_sample(density = 1/25) %&amp;gt;% 
  sf::st_cast(&amp;quot;POINT&amp;quot;) %&amp;gt;% 
  sf::st_as_sf()

# Calculate network visibilty 
output &amp;lt;- all_points %&amp;gt;% 
  split(seq(nrow(.))) %&amp;gt;% 
  parallel::mclapply(networkVisibleGreenspace,
                     isodistance = aoi.isodistances, greenspace = greenspace,
                     dsm_data = filled_dsm, dtm_data = DTM, resolution = 2, 
                     max_distance = 300, observer_height = 1.8, cores = 1, 
                     plot = FALSE, mc.cores = 22, mc.preschedule = TRUE) %&amp;gt;% 
  do.call(rbind, .)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;section-results&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Results&lt;/h3&gt;
&lt;p&gt;The results of the &lt;code&gt;networkVisibilityGreenspace&lt;/code&gt; is illustrated in the figure below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-31-1.svg&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To evaluate the mean GVI for the observer in the center, we need to summarize all measurements from the previous steps. I simply take the mean of all values, but one could also apply a linear or logistic weights function, such that the influence of a variable decreases with increasing distance, as demonstrated in our recent publication.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(mean(output$GVI), 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A mean value of 0.5 indicates, that 50% of the visible area along the network is vegetated.&lt;/p&gt;
&lt;p&gt;One big limitation of the viewshed algorithm is, that it fails to calculate eye-level visibility if the observer is underneath a tree. This is because we use a LiDAR derived DSM and calculate visibility based on the height of pixels along the lines of sight.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visible-greenness-exposure/index.en_files/figure-html/unnamed-chunk-33-1.svg&#34; width=&#34;480&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The histogram above shows, that there are a lot of points with GVI = 1. I have plotted the DSM and the GVI points along the route network in QGIS.&lt;img src=&#34;GVI_bad.png&#34; style=&#34;width:7.13in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The dark-green points are located underneath trees. Therefore, the viewshed algorithm can’t “see” beyond those trees and returns only one single visible cell, which is green. The proportion of green pixels to all visible pixels is therefore 1.&lt;/p&gt;
&lt;p&gt;As already mentioned, applying a distance function might simulate the potential activity space better, since a person will most likely use the road/path in front of his/her place of residence more often than the road 10 minutes away. I will talk about this issue in a different post and provide a solution using the &lt;a href=&#34;https://cran.r-project.org/web/packages/mosaic/index.html&#34;&gt;mosaic&lt;/a&gt; R package.&lt;/p&gt;
&lt;p&gt;However, we can see a high diversity of GVI values in the example above, in that the northern half has higher visible greenness. Therefore, future research may also incorporate &lt;em&gt;actual&lt;/em&gt; activity space measurements instead of &lt;em&gt;potential&lt;/em&gt; activity space models, to further analyze where (and why) participants spend time and thus improve the understanding of greenspace related health effects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;section-conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Data acquisition and processing with &lt;code&gt;lidR&lt;/code&gt; and &lt;code&gt;terra&lt;/code&gt; is simple and fast using R as the only tool. The implementation of a parallel viewshed algorithm has proven to be very light-weighted and fast. Using a lower resolution significantly reduces model runtime. However, even at highest resolution, the runtime is acceptable. The effect of multiprocessing is significant only with high resolution or very large values of &lt;code&gt;max_distance&lt;/code&gt;. Using this algorithm in a large scale study at high resolution appears to be practical. Compared to model 1, model 4 has an increase in visible area from 11.9% to 14.6%. The results of the other models are closer to model 1. In my opinion the trade-off between loss of accuracy for an increase in speed is acceptable down to 2m. But reducing the resolution to 5m or even more might only be worth it, if a lot of observations need to be calculated or/and for large values of &lt;em&gt;max_distance&lt;/em&gt;, since the computation time hardly differs from 2m resolution. I would suggest comparing a few points with 0.5m, 1m, 2m and 5m resolution.&lt;br /&gt;
One mayor limitation of this method is, that it fails to calculate eye-level visibility, if the observer is located underneath a tree.&lt;br /&gt;
A simple implementation of the viewshed analysis into a route network analysis served as a practical example for researching greenspace exposure.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section-references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;section-refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;section-ref-chamberlain2013&#34; class=&#34;csl-entry&#34;&gt;
Chamberlain, Brent C., and Michael J. Meitner. 2013. &lt;span&gt;“A Route-Based Visibility Analysis for Landscape Management.”&lt;/span&gt; &lt;em&gt;Landscape and Urban Planning&lt;/em&gt; 111 (March): 13–24. &lt;a href=&#34;https://doi.org/10.1016/j.landurbplan.2012.12.004&#34;&gt;https://doi.org/10.1016/j.landurbplan.2012.12.004&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-dzhambov2020&#34; class=&#34;csl-entry&#34;&gt;
Dzhambov, Angel M., Matthew H.E.M. Browning, Iana Markevych, Terry Hartig, and Peter Lercher. 2020. &lt;span&gt;“Analytical Approaches to Testing Pathways Linking Greenspace to Health: A Scoping Review of the Empirical Literature.”&lt;/span&gt; &lt;em&gt;Environmental Research&lt;/em&gt; 186 (July): 109613. &lt;a href=&#34;https://doi.org/10.1016/j.envres.2020.109613&#34;&gt;https://doi.org/10.1016/j.envres.2020.109613&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-khosravipour2014&#34; class=&#34;csl-entry&#34;&gt;
Khosravipour, Anahita, Andrew K. Skidmore, Martin Isenburg, Tiejun Wang, and Yousif A. Hussin. 2014. &lt;span&gt;“Generating Pit-Free Canopy Height Models from Airborne Lidar.”&lt;/span&gt; &lt;em&gt;Photogrammetric Engineering &amp;amp; Remote Sensing&lt;/em&gt; 80 (9): 863–72. &lt;a href=&#34;https://doi.org/10.14358/pers.80.9.863&#34;&gt;https://doi.org/10.14358/pers.80.9.863&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-labib2021&#34; class=&#34;csl-entry&#34;&gt;
Labib, S.M., Jonny J. Huck, and Sarah Lindley. 2021. &lt;span&gt;“Modelling and Mapping Eye-Level Greenness Visibility Exposure Using Multi-Source Data at High Spatial Resolutions.”&lt;/span&gt; &lt;em&gt;Science of The Total Environment&lt;/em&gt; 755 (February): 143050. &lt;a href=&#34;https://doi.org/10.1016/j.scitotenv.2020.143050&#34;&gt;https://doi.org/10.1016/j.scitotenv.2020.143050&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-labib2020&#34; class=&#34;csl-entry&#34;&gt;
Labib, S.M., Sarah Lindley, and Jonny J. Huck. 2020. &lt;span&gt;“Spatial Dimensions of the Influence of Urban Green-Blue Spaces on Human Health: A Systematic Review.”&lt;/span&gt; &lt;em&gt;Environmental Research&lt;/em&gt; 180 (January): 108869. &lt;a href=&#34;https://doi.org/10.1016/j.envres.2019.108869&#34;&gt;https://doi.org/10.1016/j.envres.2019.108869&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-markevych2017&#34; class=&#34;csl-entry&#34;&gt;
Markevych, Iana, Julia Schoierer, Terry Hartig, Alexandra Chudnovsky, Perry Hystad, Angel M. Dzhambov, Sjerp de Vries, et al. 2017. &lt;span&gt;“Exploring Pathways Linking Greenspace to Health: Theoretical and Methodological Guidance.”&lt;/span&gt; &lt;em&gt;Environmental Research&lt;/em&gt; 158 (October): 301–17. &lt;a href=&#34;https://doi.org/10.1016/j.envres.2017.06.028&#34;&gt;https://doi.org/10.1016/j.envres.2017.06.028&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-roussel2020&#34; class=&#34;csl-entry&#34;&gt;
Roussel, Jean-Romain, David Auty, Nicholas C. Coops, Piotr Tompalski, Tristan R.H. Goodbody, Andrew Sánchez Meador, Jean-François Bourdon, Florian de Boissieu, and Alexis Achim. 2020. &lt;span&gt;“lidR: An R Package for Analysis of Airborne Laser Scanning (ALS) Data.”&lt;/span&gt; &lt;em&gt;Remote Sensing of Environment&lt;/em&gt; 251 (December): 112061. &lt;a href=&#34;https://doi.org/10.1016/j.rse.2020.112061&#34;&gt;https://doi.org/10.1016/j.rse.2020.112061&lt;/a&gt;.
&lt;/div&gt;
&lt;div id=&#34;section-ref-tabrizian2020&#34; class=&#34;csl-entry&#34;&gt;
Tabrizian, Payam, Perver K. Baran, Derek Van Berkel, Helena Mitasova, and Ross Meentemeyer. 2020. &lt;span&gt;“Modeling Restorative Potential of Urban Environments by Coupling Viewscape Analysis of Lidar Data with Experiments in Immersive Virtual Environments.”&lt;/span&gt; &lt;em&gt;Landscape and Urban Planning&lt;/em&gt; 195 (March): 103704. &lt;a href=&#34;https://doi.org/10.1016/j.landurbplan.2019.103704&#34;&gt;https://doi.org/10.1016/j.landurbplan.2019.103704&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>COVID-19: 15km Radius WebApp</title>
      <link>/post/covid-19-15km-radius-webapp/</link>
      <pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/post/covid-19-15km-radius-webapp/</guid>
      <description>&lt;p&gt;Klicke &lt;a href=&#34;https://datageobrinkmann.be/bewegungsradius/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hier&lt;/a&gt; für die mobilfreundliche Version 📱&lt;br /&gt;&lt;/p&gt;
&lt;iframe frameborder=&#34;0&#34; scrolling=&#34;no&#34; seamless=&#34;seamless&#34; style=&#34;display:block; width:95%; height:85vh;&#34; src=&#34;https://datageobrinkmann.be/bewegungsradius/&#34;&gt;&lt;/iframe&gt;
&lt;br /&gt;
&lt;h1 id=&#34;covid-19-bewegungsradius&#34;&gt;COVID-19 Bewegungsradius&lt;/h1&gt;
&lt;h3 id=&#34;stand-1512020&#34;&gt;Stand: 15.1.2020&lt;/h3&gt;
&lt;p&gt;Die 15-Kilomenter Regel, nachdem sich Bewohner mit einer 7-Tage Inzidenz
von über 200 nur noch 15 km um ihren Wohnort bewegen dürfen, sorgt für
Verwirrung. Diese App soll dabei helfen, den individuellen
Bewegungsradius zu ermitteln.&lt;br&gt;
Zunächst wird die aktuelle 7-Tage-Inzidenz für jeden Landkreis
gedownloaded und in zwei Kategorien eingeteilt: &amp;lt; 200 und &amp;gt;= 200.
Anschließend wird die Adresse georeferenziert und ein 15 km Buffer wird
um die Gemeinde, bzw. den Landkreis der Adresse, oder auch die Adresse
selbst gelegt.&lt;br&gt;
Der genaue Wert der 7-Tage-Inzidenz, sowie die Verfügbarkeiten von
Intensivstationbetten (ITS) kann durch Anklicken eines Landkreisen
ausgelesen werden.&lt;/p&gt;
&lt;h2 id=&#34;die-corona-regeln-in-den-bundesländern&#34;&gt;Die Corona-Regeln in den Bundesländern&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Bundesland&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;15-km Regel&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Mehr Infos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Baden-Württemberg&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wird aktuell nicht umgesetzt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.baden-wuerttemberg.de/de/service/aktuelle-infos-zu-corona/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bayern&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.corona-katastrophenschutz.bayern.de/faq/index.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Berlin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Stadtgrenze&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.rbb24.de/politik/thema/2020/coronavirus/beitraege_neu/2020/04/berlin-corona-massnahmen-lockerung-ausgang-kontakt-erlaubt.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Brandenburg&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Für touristische Ausflüge, Sport und Bewegung im Freien, um den jeweiligen Landkreis bzw. die kreisfreie Stadt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://kkm.brandenburg.de/kkm/de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bremen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wird aktuell nicht umgesetzt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.bremen.de/corona&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hamburg&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wird aktuell nicht umgesetzt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.hamburg.de/coronavirus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hessen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze; betroffene Landkreise: Gießen, Limburg-Weilburg, Fulda, Vogelsbergkreis&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.faz.net/aktuell/rhein-main/corona-weitere-kreise-in-hessen-fuehren-15-kilometer-regel-ein-17143539.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mecklenburg-Vorpommern&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Wohnadresse&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.regierung-mv.de/corona/Corona-Regeln-seit-10.01.2021/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Niedersachsen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Wohnadresse, durch Kommunen geregelt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.niedersachsen.de/Coronavirus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Nordrhein-Westfalen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze; betroffene Landkreise: Höxter, Minden-Lübbecke, Oberbergischer Kreis, Recklinghausen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.land.nrw/corona&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rheinland-Pfalz&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze, durch Kommunen geregelt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://corona.rlp.de/index.php?id=34836&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Saarland&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Für touristische Ausflüge, um die Wohnadresse&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.saarland.de/DE/portale/corona/home/home_node.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sachsen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Wohnadresse&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.coronavirus.sachsen.de/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sachsen-Anhalt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://coronavirus.sachsen-anhalt.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Schleswig-Holstein&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze, durch Kommunen geregelt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://www.schleswig-holstein.de/DE/Schwerpunkte/Coronavirus/FAQ/Dossier/Allgemeines_Verwaltung.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Thüringen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Ab der Gemeindegrenze, nicht verpflichtend&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://corona.thueringen.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;url&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Geocoding &lt;a href=&#34;https://datascienceplus.com/osm-nominatim-with-r-getting-locations-geo-coordinates-by-its-address/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;D.
Kisler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GPS locater via Dr. Tom August’s &lt;a href=&#34;https://github.com/AugustT/shiny_geolocation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shiny geolocation Javascript
script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API Aufrufe zu den aktuellen &lt;a href=&#34;https://services7.arcgis.com/mOBPykOjAyBO2ZKk/ArcGIS/rest/services/Covid19_RKI_Sums/FeatureServer/0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;COVID-19
Fallzahlen&lt;/a&gt;
und &lt;a href=&#34;https://www.divi.de/register/tagesreport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ITS-Betten&lt;/a&gt; via
&lt;a href=&#34;https://github.com/entorb/COVID-19-Coronavirus-German-Regions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;entorb’s GitHub
Seite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Dieses Tool dient nur zu Unterhaltungszwecken und stellt keine
medizinische, rechtliche oder sonstige Form der Beratung dar. Benutzer
sollten sich auf die offiziellen Richtlinien und Empfehlungen ihrer
nationalen, staatlichen und lokalen Behörden beziehen. Es werden
keinerlei personenbezogener Daten gespeichert.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A multimethod approach for county-scale geospatial analysis of emerging infectious diseases. A cross-sectional case study of COVID-19 incidence in Germany</title>
      <link>/publication/scarpone2020/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/publication/scarpone2020/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;As of 13 July 2020, 12.9 million COVID-19 cases have been reported worldwide. Prior studies have demonstrated that local socioeconomic and built environment characteristics may significantly contribute to viral transmission and incidence rates, thereby accounting for some of the spatial variation observed. Due to uncertainties, non-linearities, and multiple interaction effects observed in the associations between COVID-19 incidence and socioeconomic, infrastructural, and built environment characteristics, we present a structured multimethod approach for analysing cross-sectional incidence data within in an Exploratory Spatial Data Analysis (ESDA) framework at the NUTS3 (county) scale.&lt;/p&gt;
&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;
&lt;p&gt;By sequentially conducting a geospatial analysis, an heuristic geographical interpretation, a Bayesian machine learning analysis, and parameterising a Generalised Additive Model (GAM), we assessed associations between incidence rates and 368 independent variables describing geographical patterns, socioeconomic risk factors, infrastructure, and features of the build environment. A spatial trend analysis and Local Indicators of Spatial Autocorrelation were used to characterise the geography of age-adjusted COVID-19 incidence rates across Germany, followed by iterative modelling using Bayesian Additive Regression Trees (BART) to identify and measure candidate explanatory variables. Partial dependence plots were derived to quantify and contextualise BART model results, followed by the parameterisation of a GAM to assess correlations.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;A strong south-to-north gradient of COVID-19 incidence was identified, facilitating an empirical classification of the study area into two epidemic subregions. All preliminary and final models indicated that location, densities of the built environment, and socioeconomic variables were important predictors of incidence rates in Germany. The top ten predictor variables’ partial dependence exhibited multiple non-linearities in the relationships between key predictor variables and COVID-19 incidence rates. The BART, partial dependence, and GAM results indicate that the strongest predictors of COVID-19 incidence at the county scale were related to community interconnectedness, geographical location, transportation infrastructure, and labour market structure.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The multimethod ESDA approach provided unique insights into spatial and aspatial non-stationarities of COVID-19 incidence in Germany. BART and GAM modelling indicated that geographical configuration, built environment densities, socioeconomic characteristics, and infrastructure all exhibit associations with COVID-19 incidence in Germany when assessed at the county scale. The results suggest that measures to implement social distancing and reduce unnecessary travel may be important methods for reducing contagion, and the authors call for further research to investigate the observed associations to inform prevention and control policy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Text Mining Belval Campus</title>
      <link>/post/text-mining-belval/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/text-mining-belval/</guid>
      <description>&lt;p&gt;In 2001 a project has been created to transform the former steel production site in Belval,
Luxembourg into the &lt;a href=&#34;https://wwwde.uni.lu/fhse/belval_campus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cité des Sciences&lt;/a&gt;. 
In &lt;a href=&#34;https://lequotidien.lu/luxembourg/le-campus-de-belval-en-un-clin-doeil/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015&lt;/a&gt; the new campus has been opened.
&lt;img src=&#34;https://wwwde.uni.lu/var/storage/images/media/images/campus_belval_final_1/1014043-1-fre-FR/campus_belval_final_1.jpg&#34; alt=&#34;Campus Belval&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this analysis I want to explore how this topic is being represented in the news.&lt;/p&gt;
&lt;p&gt;Therefore I first collected the top 58 news articles from &lt;a href=&#34;https://www.google.com/search?q=belval&amp;#43;campus&amp;#43;esch-sur-alzette&amp;amp;client=firefox-b-d&amp;amp;sxsrf=ALeKk0080OxF6oOpC3lb6hNxafFccNgYjA:1590592264605&amp;amp;source=lnms&amp;amp;tbm=nws&amp;amp;sa=X&amp;amp;ved=2ahUKEwi57Kf3qdTpAhU7ThUIHSw_CG0Q_AUoAXoECCwQAw&amp;amp;biw=1920&amp;amp;bih=966&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google News&lt;/a&gt;.
The texts have been translated to English with &lt;a href=&#34;https://www.deepl.com/en/translator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepL&lt;/a&gt; and structured 
in a .txt document like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: Title_Name
DATE: dd.mm.yyyy
.
. Text
.
Title: Title_Name
DATE: dd.mm.yyyy
.
. Text
.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;wordcloud&#34;&gt;Wordcloud&lt;/h3&gt;
&lt;p&gt;Next a Wordcloud with the word frequency of the whole corpus has been created:
&lt;img src=&#34;https://raw.githubusercontent.com/STBrinkmann/Text_Mining_Belval/master/Plots/wordcloud.svg?sanitize=true&#34;&gt;
We can already see that the new campus is of high importance. But also, the look into the future (&amp;ldquo;2022&amp;rdquo;, &amp;ldquo;future&amp;rdquo;),
and the acknowledgement of its history (&amp;ldquo;furnace&amp;rdquo;, &amp;ldquo;steel&amp;rdquo;, &amp;ldquo;industrial&amp;rdquo;&amp;hellip;) are often thematised.&lt;/p&gt;
&lt;h3 id=&#34;term-frequency-inverse-document-frequency&#34;&gt;Term Frequency-Inverse Document Frequency&lt;/h3&gt;
&lt;p&gt;At this point the corpus does not contain many articles for 2014 and 2015. 
Therefore these articles have been combined for the further analysis. The next figure shows the number of articles per year:
&lt;img src=&#34;https://raw.githubusercontent.com/STBrinkmann/Text_Mining_Belval/master/Plots/Articles_Count.svg?sanitize=true&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the wordcloud we explored the word frequency of the whole corpus. To analyse the keywords of each year, a &lt;a href=&#34;http://www.tfidf.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;term frequency-inverse document frequency&lt;/a&gt; has been conducted: 
&lt;img src=&#34;https://raw.githubusercontent.com/STBrinkmann/Text_Mining_Belval/master/Plots/tf_idf.svg?sanitize=true&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;structural-topic-model&#34;&gt;Structural Topic Model&lt;/h3&gt;
&lt;p&gt;Next a &lt;a href=&#34;https://www.structuraltopicmodel.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Structural Topic Model (STM)&lt;/a&gt; has been applied on the data set. From the previous steps we already have gained an understanding of the complexity of the coverage of reports about Belval. Therefore, we knew that there are not that many different topics. After an iterative process of setting the parameter K (number of topics) and interpreting the results, I set K = 6. These 6 topics have been labeled manually.
&lt;img src=&#34;https://raw.githubusercontent.com/STBrinkmann/Text_Mining_Belval/master/Plots/stm.svg?sanitize=true&#34;&gt;
To evaluate the importance and the change over time of these topics, the topic of each article within the corpus has been predicted. The result is shown in the final figure:
&lt;img src=&#34;https://raw.githubusercontent.com/STBrinkmann/Text_Mining_Belval/master/Plots/timeseries.svg?sanitize=true&#34;&gt;
The most frequent articles are those that deal with the university campus in Belval itself. The second most frequent type of article is the one dealing with structural change, i.e. the transformation from a former steel industry location to the Cité des Sciences, the city of science. It should be emphasized that articles on this topic predominantly highlight the positive implementation of structural change. This is followed by articles on the topic of culture, although it is clearly visible here that there has been increased reporting on this area since 2019. This is due to the fact that this year Belval was admitted to the Capital of Culture 2022. This analysis was complemented by a qualitative interview with a partner from the University of Luxembourg about the Belval project.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
The code is available on &lt;a href=&#34;https://github.com/STBrinkmann/Text_Mining_Belval&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
